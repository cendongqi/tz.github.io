<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小歪的博客</title>
  <subtitle>人生苦短，我学Python</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangslob.github.io/"/>
  <updated>2018-11-05T15:00:16.661Z</updated>
  <id>https://zhangslob.github.io/</id>
  
  <author>
    <name>小歪</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scala学习之相同的函数名</title>
    <link href="https://zhangslob.github.io/2018/11/05/Scala%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%9B%B8%E5%90%8C%E7%9A%84%E5%87%BD%E6%95%B0%E5%90%8D/"/>
    <id>https://zhangslob.github.io/2018/11/05/Scala学习之相同的函数名/</id>
    <published>2018-11-05T14:29:02.000Z</published>
    <updated>2018-11-05T15:00:16.661Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwxk5mgus2j30kk064t9d.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十八篇原创文章</div></pre></td></tr></table></figure>
<hr>
<a id="more"></a>
<p>最近在慢慢的开始用Scala写Spark，刚开始也是在菜鸟教程上简单过了一遍Scala，现在还记得一些基本语法，还有各种奇怪的语法糖。想要更快的学习这门语言，还是需要自己多谢谢。</p>
<p>今天在看别人代码时，发现他在类中定义了两个名字一模一样的函数，但是我还以为他写错了。当我以Python的思维去看待这们语言时，当然是在作死的边缘了。</p>
<p>举一个简单的栗子，从MongoDB读取数据时使用的配置所定义的两个函数</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readConfig</span></span>(context: <span class="type">SparkContext</span>, database: <span class="type">String</span>, collection: <span class="type">String</span>): <span class="type">ReadConfig</span> = &#123;</div><div class="line">  <span class="type">ReadConfig</span>(<span class="type">Map</span>(<span class="string">"database"</span> -&gt; database, <span class="string">"collection"</span> -&gt; collection),</div><div class="line">    <span class="type">Some</span>(<span class="type">ReadConfig</span>(context)))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readConfig</span></span>(session: <span class="type">SparkSession</span>, database: <span class="type">String</span>, collection: <span class="type">String</span>): <span class="type">ReadConfig</span> = &#123;</div><div class="line">  <span class="type">ReadConfig</span>(<span class="type">Map</span>(<span class="string">"database"</span> -&gt; database, <span class="string">"collection"</span> -&gt; collection),</div><div class="line">    <span class="type">Some</span>(<span class="type">ReadConfig</span>(session)))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到两个函数名一样的，刚开始我也很懵逼，但是仔细一看，他的参数是不一样的，一个是<code>context: SparkContext</code>，一个是<code>session: SparkSession</code>。这两个函数的功能一样，但是接受的参数不一样，所以这才需要去定义两个函数。（试想一下，在Python中如何去实现）</p>
<p>可能你不懂Scala，让我简单跟你讲一下。首先我们使用<code>def</code>关键字定义了一个名为<code>readConfig</code>的函数，和Python一模一样；然后就是函数接受的参数了，可以看到在每个参数后面有冒号，这个冒号就表示前面的数据类型，比如定义一个相加函数</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">add</span></span>&#123;</div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">addInt</span></span>(a:<span class="type">Int</span>, b:<span class="type">Int</span>) : <span class="type">Int</span> = &#123;</div><div class="line">      <span class="keyword">var</span> sum:<span class="type">Int</span> = <span class="number">0</span></div><div class="line">      sum = a + b</div><div class="line">      <span class="keyword">return</span> sum</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Scala会在变量后定义类型，这样就可以区别不同的函数了。</p>
<p>回到上面的栗子，一个类型是<code>SparkContext</code>，一个是<code>SparkSession</code>，这是Spark的数据类型；然后我们可以看到在函数末尾是冒号加<code>ReadConfig</code>，这里说的返回的数据类型是<code>ReadConfig</code>，也就是从MongoDB读取数据时使用的配置类型。（如果是Unit则不用返回任何数据，和Java类似）</p>
<p>是不是很好理解，在调用函数时，只要我们传递的第一个参数是不同类型，就会使用相应的函数。</p>
<p>都说Scala是一种函数式语言，函数是 Scala 语言的核心，看看Scala函数的特性，不说了，继续撸Scala了。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwxknqcwf5j31cw0e0myu.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fwxk5mgus2j30kk064t9d.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十八篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="scala" scheme="https://zhangslob.github.io/categories/scala/"/>
    
    
      <category term="scala" scheme="https://zhangslob.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>Spark实战（二）学习UDF</title>
    <link href="https://zhangslob.github.io/2018/10/29/Spark%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AD%A6%E4%B9%A0UDF/"/>
    <id>https://zhangslob.github.io/2018/10/29/Spark实战（二）学习UDF/</id>
    <published>2018-10-29T03:15:55.000Z</published>
    <updated>2018-10-29T06:22:57.947Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwj6agtwwoj30ag05k3zb.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十七篇原创文章</div></pre></td></tr></table></figure>
<hr>
<a id="more"></a>
<p>在开始正式数据处理之前，我觉得有必要去学习理解下UDF。</p>
<h1 id="UDF"><a href="#UDF" class="headerlink" title="UDF"></a>UDF</h1><p>UDF全称<code>User-Defined Functions</code>，用户自定义函数，是Spark SQL的一项功能，用于定义新的基于列的函数，这些函数扩展了Spark SQL的DSL用于转换数据集的词汇表。</p>
<p>我在databricks上找到一个比较简单理解的入门栗子：</p>
<h2 id="Register-the-function-as-a-UDF"><a href="#Register-the-function-as-a-UDF" class="headerlink" title="Register the function as a UDF"></a>Register the function as a UDF</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> squared = (s: <span class="type">Int</span>) =&gt; &#123;</div><div class="line">  s * s</div><div class="line">&#125;</div><div class="line">spark.udf.register(<span class="string">"square"</span>, squared)</div></pre></td></tr></table></figure>
<h2 id="Call-the-UDF-in-Spark-SQL"><a href="#Call-the-UDF-in-Spark-SQL" class="headerlink" title="Call the UDF in Spark SQL"></a>Call the UDF in Spark SQL</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spark.range(<span class="number">1</span>, <span class="number">20</span>).registerTempTable(<span class="string">"test"</span>)</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%sql select id, square(id) as id_squared from test</div></pre></td></tr></table></figure>
<p>我理解就是先定义一个函数<code>squared</code>，返回输入数字的平方，然后register，并绑定<code>square</code>方法名为<code>square</code>，然后就在Spark SQL中直接使用<code>square</code>方法。</p>
<h1 id="实例一：温度转化"><a href="#实例一：温度转化" class="headerlink" title="实例一：温度转化"></a>实例一：温度转化</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaUDFExample</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">    <span class="keyword">val</span> conf       = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"Scala UDF Example"</span>)</div><div class="line">    <span class="keyword">val</span> spark      = <span class="type">SparkSession</span>.builder().enableHiveSupport().config(conf).getOrCreate() </div><div class="line"></div><div class="line">    <span class="keyword">val</span> ds = spark.read.json(<span class="string">"temperatures.json"</span>)</div><div class="line">    ds.createOrReplaceTempView(<span class="string">"citytemps"</span>)</div><div class="line"></div><div class="line">    <span class="comment">// Register the UDF with our SparkSession </span></div><div class="line">    spark.udf.register(<span class="string">"CTOF"</span>, (degreesCelcius: <span class="type">Double</span>) =&gt; ((degreesCelcius * <span class="number">9.0</span> / <span class="number">5.0</span>) + <span class="number">32.0</span>))</div><div class="line"></div><div class="line">    spark.sql(<span class="string">"SELECT city, CTOF(avgLow) AS avgLowF, CTOF(avgHigh) AS avgHighF FROM citytemps"</span>).show()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们将定义一个 UDF 来将以下 JSON 数据中的温度从摄氏度（degrees Celsius）转换为华氏度（degrees Fahrenheit）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"city"</span>:<span class="string">"St. John's"</span>,<span class="string">"avgHigh"</span>:8.7,<span class="string">"avgLow"</span>:0.6&#125;</div><div class="line">&#123;<span class="string">"city"</span>:<span class="string">"Charlottetown"</span>,<span class="string">"avgHigh"</span>:9.7,<span class="string">"avgLow"</span>:0.9&#125;</div><div class="line">&#123;<span class="string">"city"</span>:<span class="string">"Halifax"</span>,<span class="string">"avgHigh"</span>:11.0,<span class="string">"avgLow"</span>:1.6&#125;</div><div class="line">&#123;<span class="string">"city"</span>:<span class="string">"Fredericton"</span>,<span class="string">"avgHigh"</span>:11.2,<span class="string">"avgLow"</span>:-0.5&#125;</div><div class="line">&#123;<span class="string">"city"</span>:<span class="string">"Quebec"</span>,<span class="string">"avgHigh"</span>:9.0,<span class="string">"avgLow"</span>:-1.0&#125;</div><div class="line">&#123;<span class="string">"city"</span>:<span class="string">"Montreal"</span>,<span class="string">"avgHigh"</span>:11.1,<span class="string">"avgLow"</span>:1.4&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<h1 id="实例二：时间转化"><a href="#实例二：时间转化" class="headerlink" title="实例二：时间转化"></a>实例二：时间转化</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Purchase</span>(<span class="params">customer_id: <span class="type">Int</span>, purchase_id: <span class="type">Int</span>, date: <span class="type">String</span>, time: <span class="type">String</span>, tz: <span class="type">String</span>, amount:<span class="type">Double</span></span>)</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> x = sc.parallelize(<span class="type">Array</span>(</div><div class="line">  <span class="type">Purchase</span>(<span class="number">123</span>, <span class="number">234</span>, <span class="string">"2007-12-12"</span>, <span class="string">"20:50"</span>, <span class="string">"UTC"</span>, <span class="number">500.99</span>),</div><div class="line">  <span class="type">Purchase</span>(<span class="number">123</span>, <span class="number">247</span>, <span class="string">"2007-12-12"</span>, <span class="string">"15:30"</span>, <span class="string">"PST"</span>, <span class="number">300.22</span>),</div><div class="line">  <span class="type">Purchase</span>(<span class="number">189</span>, <span class="number">254</span>, <span class="string">"2007-12-13"</span>, <span class="string">"00:50"</span>, <span class="string">"EST"</span>, <span class="number">122.19</span>),</div><div class="line">  <span class="type">Purchase</span>(<span class="number">187</span>, <span class="number">299</span>, <span class="string">"2007-12-12"</span>, <span class="string">"07:30"</span>, <span class="string">"UTC"</span>, <span class="number">524.37</span>)</div><div class="line">))</div><div class="line"></div><div class="line"><span class="keyword">val</span> df = sqlContext.createDataFrame(x)</div><div class="line">df.registerTempTable(<span class="string">"df"</span>)</div></pre></td></tr></table></figure>
<p>自定义函数</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeDT</span></span>(date: <span class="type">String</span>, time: <span class="type">String</span>, tz: <span class="type">String</span>) = <span class="string">s"<span class="subst">$date</span> <span class="subst">$time</span> <span class="subst">$tz</span>"</span></div><div class="line">sqlContext.udf.register(<span class="string">"makeDt"</span>, makeDT(_:<span class="type">String</span>,_:<span class="type">String</span>,_:<span class="type">String</span>))</div><div class="line"></div><div class="line"><span class="comment">// Now we can use our function directly in SparkSQL.</span></div><div class="line">sqlContext.sql(<span class="string">"SELECT amount, makeDt(date, time, tz) from df"</span>).take(<span class="number">2</span>)</div><div class="line"><span class="comment">// but not outside</span></div><div class="line">df.select($<span class="string">"customer_id"</span>, makeDt($<span class="string">"date"</span>, $<span class="string">"time"</span>, $<span class="string">"tz"</span>), $<span class="string">"amount"</span>).take(<span class="number">2</span>) <span class="comment">// fails</span></div></pre></td></tr></table></figure>
<p>如果想要在SQL外面使用，必须通过<code>spark.sql.function.udf</code>来创建UDF</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.spark.sql.functions.udf</div><div class="line"><span class="keyword">val</span> makeDt = udf(makeDT(_:<span class="type">String</span>,_:<span class="type">String</span>,_:<span class="type">String</span>))</div><div class="line"><span class="comment">// now this works</span></div><div class="line">df.select($<span class="string">"customer_id"</span>, makeDt($<span class="string">"date"</span>, $<span class="string">"time"</span>, $<span class="string">"tz"</span>), $<span class="string">"amount"</span>).take(<span class="number">2</span>)</div></pre></td></tr></table></figure>
<h1 id="实践操作"><a href="#实践操作" class="headerlink" title="实践操作"></a>实践操作</h1><p>写一个UDF来将一些Int数字分类</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> formatDistribution = (view: <span class="type">Int</span>) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (view &lt; <span class="number">10</span>) &#123;</div><div class="line">    <span class="string">"&lt;10"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view &lt;= <span class="number">100</span>) &#123;</div><div class="line">    <span class="string">"10~100"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view &lt;= <span class="number">1000</span>) &#123;</div><div class="line">    <span class="string">"100~1K"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view &lt;= <span class="number">10000</span>) &#123;</div><div class="line">    <span class="string">"1K~10K"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view &lt;= <span class="number">100000</span>) &#123;</div><div class="line">    <span class="string">"10K~100K"</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="string">"&gt;100K"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注册：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">session.udf.register(<span class="string">"formatDistribution"</span>, <span class="type">UDF</span>.formatDistribution)</div></pre></td></tr></table></figure>
<p>SQL：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">session.sql(<span class="string">"select user_id, formatDistribution(variance_digg_count) as variance from video"</span>)</div></pre></td></tr></table></figure>
<p>写到这里，再回顾UDF，我感觉这就像是去为了方便做一个分类转化等操作，和Python里面的函数一样，只不过这里的UDF一般特指Spark SQL里面使用的函数。然后发现这里和SQL中的自定义函数挺像的:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> [函数所有者.]&lt;函数名称&gt; </div><div class="line">(   </div><div class="line">    <span class="comment">-- 添加函数所需的参数，可以没有参数</span></div><div class="line">    [&lt;@param1&gt; &lt;参数类型&gt;]</div><div class="line">    [,&lt;@param1&gt; &lt;参数类型&gt;]…</div><div class="line">)</div><div class="line"><span class="keyword">RETURNS</span> <span class="keyword">TABLE</span> </div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">RETURN</span> </div><div class="line">(</div><div class="line">    <span class="comment">-- 查询返回的SQL语句</span></div><div class="line">    <span class="keyword">SELECT</span>查询语句</div><div class="line">)</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* 创建内联表值函数，查询交易总额大于1W的开户人个人信息</div><div class="line">*/</div><div class="line"><span class="keyword">create</span> <span class="keyword">function</span> getCustInfo()</div><div class="line"><span class="keyword">returns</span> @CustInfo <span class="keyword">table</span>  <span class="comment">--返回table类型</span></div><div class="line">(</div><div class="line">    <span class="comment">--账户ID</span></div><div class="line">    CustID <span class="built_in">int</span>,</div><div class="line">    <span class="comment">--帐户名称</span></div><div class="line">    CustName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">    <span class="comment">--身份证号</span></div><div class="line">    IDCard <span class="built_in">varchar</span>(<span class="number">18</span>),</div><div class="line">    <span class="comment">--电话</span></div><div class="line">    TelePhone <span class="built_in">varchar</span>(<span class="number">13</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">    <span class="comment">--地址</span></div><div class="line">    Address <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span>(<span class="string">'地址不详'</span>)</div><div class="line">)</div><div class="line"><span class="keyword">as</span></div><div class="line"><span class="keyword">begin</span></div><div class="line">    <span class="comment">--为table表赋值</span></div><div class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> @CustInfo</div><div class="line">    <span class="keyword">select</span> CustID,CustName,IDCard,TelePhone,Address <span class="keyword">from</span> AccountInfo </div><div class="line">    <span class="keyword">where</span> CustID <span class="keyword">in</span> (<span class="keyword">select</span> CustID <span class="keyword">from</span> CardInfo </div><div class="line">    <span class="keyword">where</span> CardID <span class="keyword">in</span> (<span class="keyword">select</span> CardID <span class="keyword">from</span> TransInfo <span class="keyword">group</span> <span class="keyword">by</span> CardID,transID,TransType,TransMoney,TransDate <span class="keyword">having</span> <span class="keyword">sum</span>(TransMoney)&gt;<span class="number">10000</span>))</div><div class="line">    <span class="keyword">return</span></div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="keyword">go</span></div><div class="line"><span class="comment">-- 调用内联表值函数</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> getCustInfo()</div><div class="line"><span class="keyword">go</span></div></pre></td></tr></table></figure>
<p>好像有异曲同工之妙~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwly1fwj6agtwwoj30ag05k3zb.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十七篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="spark" scheme="https://zhangslob.github.io/categories/spark/"/>
    
    
      <category term="spark" scheme="https://zhangslob.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>spark实战（一）：对数据处理的理解</title>
    <link href="https://zhangslob.github.io/2018/10/24/spark%E5%AE%9E%E6%88%98%E4%B8%80%EF%BC%9A%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://zhangslob.github.io/2018/10/24/spark实战一：对数据处理的理解/</id>
    <published>2018-10-24T03:05:16.000Z</published>
    <updated>2018-10-24T09:13:17.261Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwj6agtwwoj30ag05k3zb.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十六篇原创文章</div></pre></td></tr></table></figure>
<hr>
<a id="more"></a>
<h1 id="大数据的学习经历"><a href="#大数据的学习经历" class="headerlink" title="大数据的学习经历"></a>大数据的学习经历</h1><p>大数据是什么，我觉得应该有这么几步：</p>
<ol>
<li>数据采集（Python&amp;&amp;Scrapy）</li>
<li>数据清洗（Scala&amp;&amp;Spark）</li>
<li>指标计算（Scala&amp;&amp;Spark）</li>
<li>数据展示（Postgre）</li>
</ol>
<p>做了一段时间的爬虫，或者说叫数据采集，但是从来没有接触到大数据的下一步。最近和慢慢聊了下，对数据处理也很感兴趣，便想去接触、尝试。</p>
<p>在慢慢、登登等人的帮助下，开始学习了一段时间的Spark。刚开始学习SQL语句，现在就记得简单的那些了。然后去看Spark文档，自己动手开始写。</p>
<p>因为团队主要用Scala开发，所以中途又花了一些时间来学习Scala语言，感觉和Python有许多类似的地方，并不是太难，但是Scala有一些特性，不是太明白，主要是自己写太少了。爬虫什么的还是用Python。</p>
<p>然后再去看具体的Spark 项目，模仿（抄袭）别人的代码，大概也看懂了一些，由于始终没有自己实践来操作，所以缺乏实际操作能力。最好的办法就是自己去写，所以计划自己去单独做一个项目试试看，手头上还有好多已开发但是还没开始计算的项目，我自己可以先试试看。</p>
<h1 id="大数据处理步骤"><a href="#大数据处理步骤" class="headerlink" title="大数据处理步骤"></a>大数据处理步骤</h1><p>在上面所说的基础上再说细一些。</p>
<ul>
<li>数据采集就别说了，就是采集我们所需要的（产品经理要求的）数据</li>
<li>数据清洗这里，是和数据采集有很大关系的。分为这么两步：<ul>
<li>提取指定数据。因为我们在做数据采集的时候，为了保证数据的完整性，是尽可能多的保存原始数据，也就是别人给多少，我就取多少，但是这些数据并非都是有用的数据，所以第一步是需要去提取原始数据表中我们所需要的指定数据。这里方法有很多，用SQL，或者在道路数据的时候直接选取那些字段即可。最后我们把这些提取的数据重新保存在新的表中，这样后面计算会方便很多。（其实这一步在数据采集就可以完成，但是谁也说不清到底以后会不会需要更多的数据）</li>
<li>清洗数据。比如时间维度、为空字段等等，这些现在遇到的还不多，以后再补上。</li>
</ul>
</li>
<li>指标计算。这一步就需要根据具体的需求来计算各种维度，并把计算好的数据保存新表。</li>
<li>数据展示。这部分好像是后端做的，待了解。</li>
</ul>
<h1 id="需要了解的知识"><a href="#需要了解的知识" class="headerlink" title="需要了解的知识"></a>需要了解的知识</h1><ol>
<li><p>开发工具和环境 </p>
<ol>
<li>MongoDB </li>
<li>Postgre </li>
<li>SQL，JOIN </li>
<li>Docker </li>
<li>IDEA、SBT </li>
<li>Scala（2.10+） </li>
</ol>
</li>
<li><p>Spark </p>
<ol>
<li>官方文档 </li>
<li>UDF </li>
</ol>
</li>
</ol>
<p>目前感觉以上部分都有一知半解，必须要实际去做才能知道到底那部分掌握，那部分还不懂。</p>
<h1 id="我的计划"><a href="#我的计划" class="headerlink" title="我的计划"></a>我的计划</h1><ol>
<li>找PM要DM文档，理解具体业务需求</li>
<li>根据需求来选择数据库中的数据维度</li>
<li>在本地尝试数据清洗并计算指标</li>
<li>有问题请教慢慢＆登登</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwjf538h8bj30f50awgm6.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwly1fwj6agtwwoj30ag05k3zb.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十六篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="spark" scheme="https://zhangslob.github.io/categories/spark/"/>
    
    
      <category term="spark" scheme="https://zhangslob.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark教程（二）Spark连接MongoDB</title>
    <link href="https://zhangslob.github.io/2018/09/03/Spark%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89Spark%E8%BF%9E%E6%8E%A5MongoDB/"/>
    <id>https://zhangslob.github.io/2018/09/03/Spark教程（二）Spark连接MongoDB/</id>
    <published>2018-09-03T14:00:59.000Z</published>
    <updated>2018-09-03T14:07:13.658Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic4.zhimg.com/v2-4d4095947c89bd7dc59b691aec7fb0ed_1200x500.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十五篇原创文章</div></pre></td></tr></table></figure>
<p>学习Spark  (๑• . •๑)</p>
<a id="more"></a>
<h1 id="如何导入数据"><a href="#如何导入数据" class="headerlink" title="如何导入数据"></a>如何导入数据</h1><p>数据可能有各种格式，虽然常见的是<code>HDFS</code>，但是因为在Python爬虫中数据库用的比较多的是<code>MongoDB</code>，所以这里会重点说说如何用spark导入<code>MongoDB</code>中的数据。</p>
<p>当然，首先你需要在自己电脑上安装spark环境，简单说下，在这里<a href="http://spark.apache.org/downloads.html" target="_blank" rel="external">下载spark</a>，同时需要配置好<code>JAVA</code>，<code>Scala</code>环境。</p>
<p>这里建议使用<code>Jupyter notebook</code>，会比较方便，在环境变量中这样设置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PYSPARK_DRIVER_PYTHON=jupyter </div><div class="line">PYSPARK_DRIVER_PYTHON_OPTS=notebook ./bin/pyspark</div></pre></td></tr></table></figure>
<p>如果你的环境中有多个Python版本，同样可以制定你想要使用的解释器，我这里是<code>python36</code>，根据需求修改。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PYSPARK_PYTHON=/usr/bin/python36</div></pre></td></tr></table></figure>
<h1 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h1><p>进入spark根目录，<code>./bin/pyspark</code>这是最简单的启动命令，默认会打开Python的交互式解释器，但是由于我们上面有设置过，会打开<code>Jupyter notebook</code>，接下来变成会方便很多。</p>
<p>先来看看最简单的例子：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; textFile = spark.read.text(<span class="string">"README.md"</span>)</div><div class="line"></div><div class="line">&gt;&gt;&gt; textFile.count()  <span class="comment"># Number of rows in this DataFrame</span></div><div class="line">126</div><div class="line"></div><div class="line">&gt;&gt;&gt; textFile.first()  <span class="comment"># First row in this DataFrame</span></div><div class="line">Row(value=u<span class="string">'# Apache Spark'</span>)</div><div class="line"></div><div class="line">&gt;&gt;&gt; linesWithSpark = textFile.filter(textFile.value.contains(<span class="string">"Spark"</span>))</div><div class="line"></div><div class="line"></div><div class="line">&gt;&gt;&gt; textFile.filter(textFile.value.contains(<span class="string">"Spark"</span>)).count()  <span class="comment"># How many lines contain "Spark"?</span></div><div class="line">15</div></pre></td></tr></table></figure>
<p>这里有我之前写过的例子，可以照着写一遍 <a href="https://github.com/zhangslob/learning-spark/blob/master/code/Python/basic_exercise.ipynb" target="_blank" rel="external">basic_exercise</a></p>
<p>我们的启动方式是<code>./bin/pyspark</code>，我们可以家后面加很多参数，比如说如若我们要连接MongoDB，就需要这样</p>
<p>完整的可以参考<a href="https://docs.mongodb.com/spark-connector/master/python-api/" target="_blank" rel="external">Spark Connector Python Guide</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./bin/pyspark --conf <span class="string">"spark.mongodb.input.uri=mongodb://127.0.0.1/test.myCollection?readPreference=primaryPreferred"</span> \</div><div class="line">              --conf <span class="string">"spark.mongodb.output.uri=mongodb://127.0.0.1/test.myCollection"</span> \</div><div class="line">              --packages org.mongodb.spark:mongo-spark-connector_2.11:2.3.0</div></pre></td></tr></table></figure>
<p>这里有两个<code>uri</code>，分别是<code>input</code>和<code>output</code>，对应读取的数据库和写入的数据库，最后面的<code>packages</code>相当于引入的包的名字，我一般喜欢在代码中定义。</p>
<h1 id="读取-保存数据"><a href="#读取-保存数据" class="headerlink" title="读取/保存数据"></a>读取/保存数据</h1><p>这里我们可以增加参数<code>option</code>，在这里设置想要读取的数据库地址，注意格式。</p>
<p>读取数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df = spark.read.format(<span class="string">"com.mongodb.spark.sql.DefaultSource"</span>).option(<span class="string">"uri"</span>,</div><div class="line"><span class="string">"mongodb://127.0.0.1/people.contacts"</span>).load()</div></pre></td></tr></table></figure>
<p>保存数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">people.write.format(<span class="string">"com.mongodb.spark.sql.DefaultSource"</span>).mode(<span class="string">"append"</span>).option(<span class="string">"uri"</span>,</div><div class="line"><span class="string">"mongodb://127.0.0.1/people.contacts"</span>).option(<span class="string">"database"</span>,</div><div class="line"><span class="string">"people"</span>).option(<span class="string">"collection"</span>, <span class="string">"contacts"</span>).save()</div></pre></td></tr></table></figure>
<p>简单对比下，<code>option</code>还可以定义<code>database</code>和<code>collection</code>，这样就不需要在启动Spark时定义。</p>
<p>以上是官网推荐的连接方式，这里需要说的是另一种，如果我没有从命令行中启动，而是直接新建一个py文件，该如何操作？</p>
<p>搜索相关资料后，发现是这样</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'zhangslob'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</div><div class="line"></div><div class="line"><span class="comment"># set PYSPARK_PYTHON to python36</span></div><div class="line">os.environ[<span class="string">'PYSPARK_PYTHON'</span>] = <span class="string">'/usr/bin/python36'</span></div><div class="line"></div><div class="line"><span class="comment"># load mongo data</span></div><div class="line">input_uri = <span class="string">"mongodb://127.0.0.1:spark.spark_test"</span></div><div class="line">output_uri = <span class="string">"mongodb://127.0.0.1:spark.spark_test"</span></div><div class="line"></div><div class="line">my_spark = SparkSession\</div><div class="line">    .builder\</div><div class="line">    .appName(<span class="string">"MyApp"</span>)\</div><div class="line">    .config(<span class="string">"spark.mongodb.input.uri"</span>, input_uri)\</div><div class="line">    .config(<span class="string">"spark.mongodb.output.uri"</span>, output_uri)\</div><div class="line">    .config(<span class="string">'spark.jars.packages'</span>,<span class="string">'org.mongodb.spark:mongo-spark-connector_2.11:2.2.0'</span>)\</div><div class="line">    .getOrCreate()</div><div class="line"></div><div class="line">df = my_spark.read.format(<span class="string">'com.mongodb.spark.sql.DefaultSource'</span>).load()</div></pre></td></tr></table></figure>
<p>必须要增加默认设置<code>(&#39;spark.jars.packages&#39;,&#39;org.mongodb.spark:mongo-spark-connector_2.11:2.2.0&#39;)</code>，否则会报错。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4d4095947c89bd7dc59b691aec7fb0ed_1200x500.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十五篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;学习Spark  (๑• . •๑)&lt;/p&gt;
    
    </summary>
    
      <category term="spark" scheme="https://zhangslob.github.io/categories/spark/"/>
    
    
      <category term="spark" scheme="https://zhangslob.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark教程（一）为什么要学spark</title>
    <link href="https://zhangslob.github.io/2018/09/01/Spark%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6spark/"/>
    <id>https://zhangslob.github.io/2018/09/01/Spark教程（一）为什么要学spark/</id>
    <published>2018-09-01T14:00:50.000Z</published>
    <updated>2018-09-03T14:05:47.548Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic4.zhimg.com/v2-4d4095947c89bd7dc59b691aec7fb0ed_1200x500.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十四篇原创文章</div></pre></td></tr></table></figure>
<p>学习Spark  (๑• . •๑)</p>
<a id="more"></a>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Apache Spark是一个开源集群运算框架，最初是由加州大学柏克莱分校AMPLab所开发。相对于Hadoop的MapReduce会在运行完工作后将中介数据存放到磁盘中，Spark使用了存储器内运算技术，能在数据尚未写入硬盘时即在存储器内分析运算。</p>
<p>Spark在存储器内运行程序的运算速度能做到比Hadoop MapReduce的运算速度快上100倍，即便是运行程序于硬盘时，Spark也能快上10倍速度。Spark允许用户将数据加载至集群存储器，并多次对其进行查询，非常适合用于机器学习算法</p>
<p>Spark也支持伪分布式（pseudo-distributed）本地模式，不过通常只用于开发或测试时以本机文件系统取代分布式存储系统。在这样的情况下，Spark仅在一台机器上使用每个CPU核心运行程序。</p>
<blockquote>
<p>Apache Spark™ is a unified analytics engine for large-scale data processing.</p>
</blockquote>
<h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><ol>
<li>首先，Spark为我们提供了一个全面、统一的框架用于管理各种有着不同性质（文本数据、图表数据等）的数据集和数据源（批量数据或实时的流数据）的大数据处理的需求。</li>
<li>Spark可以将Hadoop集群中的应用在内存中的运行速度提升100倍，甚至能够将应用在磁盘上的运行速度提升10倍。</li>
<li>Spark让开发者可以快速的用Java、Scala或Python编写程序。它本身自带了一个超过80个高阶操作符集合。而且还可以用它在shell中以交互式地查询数据。</li>
<li>除了Map和Reduce操作之外，它还支持SQL查询，流数据，机器学习和图表数据处理。开发者可以在一个数据管道用例中单独使用某一能力或者将这些能力结合在一起使用。</li>
</ol>
<p><img src="https://pic4.zhimg.com/80/v2-9fad838af226986154c0053b0b59d337_hd.jpg" alt=""></p>
<h1 id="亲身体会"><a href="#亲身体会" class="headerlink" title="亲身体会"></a>亲身体会</h1><p>经过这两周的折腾，总算是在本地环境下完成了第一个spark项目，完成十万级文本分词和去重，速度还是挺快的，从读取数据、处理数据、再到保存数据，大概花了十分钟左右。这里操作的数据库都是MongoDB，因为爬虫爬取的数据都是直接保存到Mongo。</p>
<p>之后再增加数据量，达到四千多万，读取数据花了8分钟，下图是正在处理和保存数据的Spark UI。</p>
<p><img src="https://pic1.zhimg.com/v2-297ea8af7b3cce137f8e49aeec10295d_r.jpg" alt=""></p>
<p>以前处理数据会使用pandas，数据会保存在内存中，数据量过大就会崩了，这也是为什么要使用分布式计算的原因。没有做过横向对比，暂时还不知道有多大差别。</p>
<p>最后花了1.3h，本地处理完了四千多万数据，CPU和内存都要炸了，看来以后计算部分还是要搭集群。</p>
<p><img src="https://pic1.zhimg.com/v2-da6f75baee44298362382c4fdfda51fa_r.jpg" alt=""></p>
<h1 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h1><p>我在Github上开了一个仓库，记录所学，地址在这：<a href="https://github.com/zhangslob/learning-spark" target="_blank" rel="external">learning-spark</a></p>
<p>刚开始使用的语言还是Python，目标是学Scala，看了些基础语法，和Python挺类似的，以后多写写，维持这个项目，记录各种坑。</p>
<p>ok，BB了这么多，下一篇就要开始真正的代码实战了。</p>
<p><img src="https://pic3.zhimg.com/80/v2-7b58d87198c657329a93350c480cc75e_hd.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4d4095947c89bd7dc59b691aec7fb0ed_1200x500.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十四篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;学习Spark  (๑• . •๑)&lt;/p&gt;
    
    </summary>
    
      <category term="spark" scheme="https://zhangslob.github.io/categories/spark/"/>
    
    
      <category term="spark" scheme="https://zhangslob.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>使用scrapy发送post请求的坑</title>
    <link href="https://zhangslob.github.io/2018/08/24/%E4%BD%BF%E7%94%A8scrapy%E5%8F%91%E9%80%81post%E8%AF%B7%E6%B1%82%E7%9A%84%E5%9D%91/"/>
    <id>https://zhangslob.github.io/2018/08/24/使用scrapy发送post请求的坑/</id>
    <published>2018-08-24T13:54:28.000Z</published>
    <updated>2018-09-03T13:59:38.696Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/v2-4a7e42516aa3fc2ad8c5532d885e3c44_1200x500.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十三篇原创文章</div></pre></td></tr></table></figure>
<p>使用scrapy发送post请求的坑</p>
<a id="more"></a>
<h1 id="使用requests发送post请求"><a href="#使用requests发送post请求" class="headerlink" title="使用requests发送post请求"></a>使用requests发送post请求</h1><p>先来看看使用requests来发送post请求是多少好用，发送请求</p>
<p>Requests 简便的 API 意味着所有 HTTP 请求类型都是显而易见的。例如，你可以这样发送一个 HTTP POST 请求：</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.post(<span class="string">'http://httpbin.org/post'</span>, data = &#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125;)</div></pre></td></tr></table></figure>
<p>使用data可以传递字典作为参数，同时也可以传递元祖</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>payload = ((<span class="string">'key1'</span>, <span class="string">'value1'</span>), (<span class="string">'key1'</span>, <span class="string">'value2'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.post(<span class="string">'http://httpbin.org/post'</span>, data=payload)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.text)</div><div class="line">&#123;</div><div class="line">  ...</div><div class="line">  <span class="string">"form"</span>: &#123;</div><div class="line">    <span class="string">"key1"</span>: [</div><div class="line">      <span class="string">"value1"</span>,</div><div class="line">      <span class="string">"value2"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>传递json是这样</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'https://api.github.com/some/endpoint'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>payload = &#123;<span class="string">'some'</span>: <span class="string">'data'</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.post(url, data=json.dumps(payload))</div></pre></td></tr></table></figure>
<p>2.4.2 版的新加功能：</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'https://api.github.com/some/endpoint'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>payload = &#123;<span class="string">'some'</span>: <span class="string">'data'</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.post(url, json=payload)</div></pre></td></tr></table></figure>
<p>也就是说，你不需要对参数做什么变化，只需要关注使用data=还是json=，其余的requests都已经帮你做好了。</p>
<h1 id="使用scrapy发送post请求"><a href="#使用scrapy发送post请求" class="headerlink" title="使用scrapy发送post请求"></a>使用scrapy发送post请求</h1><p>官方推荐的 Using FormRequest to send data via HTTP POST</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> [FormRequest(url=<span class="string">"http://www.example.com/post/action"</span>,</div><div class="line">                    formdata=&#123;<span class="string">'name'</span>: <span class="string">'John Doe'</span>, <span class="string">'age'</span>: <span class="string">'27'</span>&#125;,</div><div class="line">                    callback=self.after_post)]</div></pre></td></tr></table></figure>
<p>这里使用的是FormRequest，并使用formdata传递参数，看到这里也是一个字典。</p>
<p>但是，超级坑的一点来了，今天折腾了一下午，使用这种方法发送请求，怎么发都会出问题，返回的数据一直都不是我想要的</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> scrapy.FormRequest(url, formdata=(payload))</div></pre></td></tr></table></figure>
<p>在网上找了很久，最终找到一种方法，使用scrapy.Request发送请求，就可以正常的获取数据。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> scrapy.Request(url, body=json.dumps(payload), method=<span class="string">'POST'</span>, headers=&#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;,)</div></pre></td></tr></table></figure>
<p>参考：Send Post Request in Scrapy</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">my_data = &#123;<span class="string">'field1'</span>: <span class="string">'value1'</span>, <span class="string">'field2'</span>: <span class="string">'value2'</span>&#125;</div><div class="line">request = scrapy.Request( url, method=<span class="string">'POST'</span>, </div><div class="line">                          body=json.dumps(my_data), </div><div class="line">                          headers=&#123;<span class="string">'Content-Type'</span>:<span class="string">'application/json'</span>&#125; )</div></pre></td></tr></table></figure>
<h1 id="FormRequest-与-Request-区别"><a href="#FormRequest-与-Request-区别" class="headerlink" title="FormRequest 与 Request 区别"></a>FormRequest 与 Request 区别</h1><p>在文档中，几乎看不到差别，</p>
<blockquote>
<p>The FormRequest class adds a new argument to the constructor. The remaining arguments are the same as for the Request class and are not documented here.</p>
<p>Parameters:    formdata (dict or iterable of tuples) – is a dictionary (or iterable of (key, value) tuples) containing HTML Form data which will be url-encoded and assigned to the body of the request.</p>
</blockquote>
<p>说FormRequest新增加了一个参数formdata，接受包含表单数据的字典或者可迭代的元组，并将其转化为请求的body。并且FormRequest是继承Request的</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormRequest</span><span class="params">(Request)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        formdata = kwargs.pop(<span class="string">'formdata'</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> formdata <span class="keyword">and</span> kwargs.get(<span class="string">'method'</span>) <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            kwargs[<span class="string">'method'</span>] = <span class="string">'POST'</span></div><div class="line"></div><div class="line">        super(FormRequest, self).__init__(*args, **kwargs)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> formdata:</div><div class="line">            items = formdata.items() <span class="keyword">if</span> isinstance(formdata, dict) <span class="keyword">else</span> formdata</div><div class="line">            querystr = _urlencode(items, self.encoding)</div><div class="line">            <span class="keyword">if</span> self.method == <span class="string">'POST'</span>:</div><div class="line">                self.headers.setdefault(<span class="string">b'Content-Type'</span>, <span class="string">b'application/x-www-form-urlencoded'</span>)</div><div class="line">                self._set_body(querystr)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self._set_url(self.url + (<span class="string">'&amp;'</span> <span class="keyword">if</span> <span class="string">'?'</span> <span class="keyword">in</span> self.url <span class="keyword">else</span> <span class="string">'?'</span>) + querystr)</div><div class="line">            <span class="comment">###</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_urlencode</span><span class="params">(seq, enc)</span>:</span></div><div class="line">    values = [(to_bytes(k, enc), to_bytes(v, enc))</div><div class="line">              <span class="keyword">for</span> k, vs <span class="keyword">in</span> seq</div><div class="line">              <span class="keyword">for</span> v <span class="keyword">in</span> (vs <span class="keyword">if</span> is_listlike(vs) <span class="keyword">else</span> [vs])]</div><div class="line">    <span class="keyword">return</span> urlencode(values, doseq=<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>最终我们传递的{‘key’: ‘value’, ‘k’: ‘v’}会被转化为’key=value&amp;k=v’ 并且默认的method是POST，再来看看Request</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span><span class="params">(object_ref)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url, callback=None, method=<span class="string">'GET'</span>, headers=None, body=None,</span></span></div><div class="line">                 cookies=None, meta=None, encoding=<span class="string">'utf-8'</span>, priority=<span class="number">0</span>,</div><div class="line">                 dont_filter=False, errback=None, flags=None):</div><div class="line"></div><div class="line">        self._encoding = encoding  <span class="comment"># this one has to be set first</span></div><div class="line">        self.method = str(method).upper()</div></pre></td></tr></table></figure>
<p>默认的方法是GET，其实并不影响。仍然可以发送post请求。这让我想起来requests中的request用法，这是定义请求的基础方法。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(method, url, **kwargs)</span>:</span></div><div class="line">    <span class="string">"""Constructs and sends a :class:`Request &lt;Request&gt;`.</span></div><div class="line"></div><div class="line">    :param method: method for the new :class:`Request` object.</div><div class="line">    :param url: URL for the new :class:`Request` object.</div><div class="line">    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.</div><div class="line">    :param data: (optional) Dictionary or list of tuples ``[(key, value)]`` (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.</div><div class="line">    :param json: (optional) json data to send in the body of the :class:`Request`.</div><div class="line">    :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.</div><div class="line">    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.</div><div class="line">    :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``&#123;'name': file-tuple&#125;``) for multipart encoding upload.</div><div class="line">        ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``</div><div class="line">        or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string</div><div class="line">        defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers</div><div class="line">        to add for the file.</div><div class="line">    :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.</div><div class="line">    :param timeout: (optional) How many seconds to wait for the server to send data</div><div class="line">        before giving up, as a float, or a :ref:`(connect timeout, read</div><div class="line">        timeout) &lt;timeouts&gt;` tuple.</div><div class="line">    :type timeout: float or tuple</div><div class="line">    :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.</div><div class="line">    :type allow_redirects: bool</div><div class="line">    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.</div><div class="line">    :param verify: (optional) Either a boolean, in which case it controls whether we verify</div><div class="line">            the server's TLS certificate, or a string, in which case it must be a path</div><div class="line">            to a CA bundle to use. Defaults to ``True``.</div><div class="line">    :param stream: (optional) if ``False``, the response content will be immediately downloaded.</div><div class="line">    :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.</div><div class="line">    :return: :class:`Response &lt;Response&gt;` object</div><div class="line">    :rtype: requests.Response</div><div class="line"></div><div class="line">    Usage::</div><div class="line"></div><div class="line">      &gt;&gt;&gt; import requests</div><div class="line">      &gt;&gt;&gt; req = requests.request('GET', 'http://httpbin.org/get')</div><div class="line">      &lt;Response [200]&gt;</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># By using the 'with' statement we are sure the session is closed, thus we</span></div><div class="line">    <span class="comment"># avoid leaving sockets open which can trigger a ResourceWarning in some</span></div><div class="line">    <span class="comment"># cases, and look like a memory leak in others.</span></div><div class="line">    <span class="keyword">with</span> sessions.Session() <span class="keyword">as</span> session:</div><div class="line">        <span class="keyword">return</span> session.request(method=method, url=url, **kwargs)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-4a7e42516aa3fc2ad8c5532d885e3c44_1200x500.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十三篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用scrapy发送post请求的坑&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="scrapy" scheme="https://zhangslob.github.io/tags/scrapy/"/>
    
      <category term="post" scheme="https://zhangslob.github.io/tags/post/"/>
    
  </entry>
  
  <entry>
    <title>淘宝sign加密算法</title>
    <link href="https://zhangslob.github.io/2018/08/14/%E6%B7%98%E5%AE%9Dsign%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>https://zhangslob.github.io/2018/08/14/淘宝sign加密算法/</id>
    <published>2018-08-14T13:50:33.000Z</published>
    <updated>2018-09-03T13:56:28.816Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic4.zhimg.com/v2-1b87ba90b26d4a65d78146dcee21a40e_1200x500.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十二篇原创文章</div></pre></td></tr></table></figure>
<p>淘宝sign加密算法</p>
<a id="more"></a>
<h1 id="淘宝sign加密算法"><a href="#淘宝sign加密算法" class="headerlink" title="淘宝sign加密算法"></a>淘宝sign加密算法</h1><p>淘宝对于h5的访问采用了和客户端不同的方式，由于在h5的js代码中保存appsercret具有较高的风险，mtop采用了随机分配令牌的方式，为每个访问端分配一个token，保存在用户的cookie中，通过cookie带回服务端分配的token, 客户端利用分配的token对请求的URL参数生成摘要值sign,</p>
<p>MTOP利用这个摘用值和cookie中的token来防止URL篡改。</p>
<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ol>
<li>当本地cookie中的token为空时（通常是第一次访问），mtop会收到”FAIL_SYS_TOKEN_EXOIRED:: 令牌过期“这个错误应答，同时mtop会生成token写入cookie中（response.cookies）。</li>
<li>第二次请求时，js通过读取cookie中的token值，按照约定的算法生成sign, sign在mtop的请求中带上，mtop通过cookie中和token用同样的方式计算出sign,与请求的sign进行比较，检查通过将返回api的应答，失败提示“FAIL_SYS_ILLEGAL_ACCESS:: 非法请求”</li>
<li>cookie中的token是有时效性的，遇到token失效时，将收到应答”FAIL_SYS_TOKEN_EXOIRED:: 令牌过期”, 同时会写入新的token,js利用新的token重新计算sign并重发请求。</li>
</ol>
<p>关于cookie中的token的自我检查，由于token在cookie中是明文的，可能会被仿冒，在输出的cookie中包含一个用非对称密钥的公钥加密后的token, MTOP在每次请求时会先检查cookie中的token是否是由服务端分配出去的（利用加密后的token和私钥还原token，与回传的明文token比较）</p>
<h1 id="sign-生成"><a href="#sign-生成" class="headerlink" title="sign 生成"></a>sign 生成</h1><p>关于sign的生成公式：</p>
<p><code>md5Hex(token&amp;t&amp;appKey&amp;data)</code></p>
<p>如：md5Hex(“645d1f414d4914297dfaab40f3f76016 &amp;1234&amp;4272&amp;{“itemNumId”:”1500011132496”}”)</p>
<p>sign=d2b2f818a03496b296b899a230c03abd</p>
<h1 id="token"><a href="#token" class="headerlink" title="token"></a>token</h1><p>关于cookie的有效时长，cookie的有效时长为7天，但是token的有效时长目前为60分钟<br>_m_h5_tk: 格式为 明文token_expireTime, 从response.cookies处获取，如： <code>2fcd2baa62fc60f73c0487a9f8a0a9d1_1362559577301</code></p>
<p>token就是2fcd2baa62fc60f73c0487a9f8a0a9d1</p>
<p>t<br>很简单，即时间戳 int(time.time()*1000)</p>
<p>appKey<br>一般是固定数值</p>
<p>data<br>一般是提交的参数</p>
<p>example<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'accept-encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</div><div class="line">    <span class="string">'accept-language'</span>: <span class="string">'zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7'</span>,</div><div class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) CriOS/56.0.2924.75 Mobile/14E5239e Safari/602.1'</span>,</div><div class="line">    <span class="string">'accept'</span>: <span class="string">'*/*'</span>,</div><div class="line">    <span class="string">'referer'</span>: <span class="string">'https://h5.m.taobao.com/?sprefer=sypc00'</span>,</div><div class="line">    <span class="string">'authority'</span>: <span class="string">'h5api.m.taobao.com'</span>,</div><div class="line">    <span class="string">'cookie'</span>: <span class="string">'t=cff5759b3198bafb639030a7296d6bff; cna=OOz3EwDBHU8CAS9eVNkZGaaY; thw=cn; _m_h5_tk=4dab06478749cf71bcb31296c169e46f_1534260967070; _m_h5_tk_enc=eb5abdfc8a3e52d0f7982d2ab34eb471; isg=BH9_A4W7GMQHLxzbVJKP32QcDlqleywDp44sWxFMGy51IJ-iGTRjVv02ZvbeeKt-'</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line">params = (</div><div class="line">    (<span class="string">'jsv'</span>, <span class="string">'2.4.11'</span>),</div><div class="line">    (<span class="string">'appKey'</span>, <span class="string">'12574478'</span>),</div><div class="line">    (<span class="string">'t'</span>, <span class="string">'1534253767277'</span>),</div><div class="line">    (<span class="string">'sign'</span>, <span class="string">'12c6fac6a03cf98c8f912413feeaeaaf'</span>),</div><div class="line">    (<span class="string">'api'</span>, <span class="string">'mtop.taobao.wireless.home.load'</span>),</div><div class="line">    (<span class="string">'v'</span>, <span class="string">'1.0'</span>),</div><div class="line">    (<span class="string">'type'</span>, <span class="string">'jsonp'</span>),</div><div class="line">    (<span class="string">'dataType'</span>, <span class="string">'jsonp'</span>),</div><div class="line">    (<span class="string">'callback'</span>, <span class="string">'mtopjsonp2'</span>),</div><div class="line">    (<span class="string">'data'</span>, <span class="string">'&#123;"containerId":"main","ext":"&#123;\\"h5_platform\\":\\"h5\\",\\"h5_ttid\\":\\"60000@taobao_h5_1.0.0\\"&#125;"&#125;'</span>),</div><div class="line">)</div><div class="line"></div><div class="line">response = requests.get(<span class="string">'https://h5api.m.taobao.com/h5/mtop.taobao.wireless.home.load/1.0/'</span>, headers=headers, params=params)</div></pre></td></tr></table></figure></p>
<h1 id="如何寻找"><a href="#如何寻找" class="headerlink" title="如何寻找"></a>如何寻找</h1><p>看下面这段js</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># https://g.alicdn.com/hollywood/hollywood-lib/2.0.2/mtop.js</div><div class="line"></div><div class="line">if (d.H5Request === !0) &#123;</div><div class="line">    var f = "//" + (d.prefix ? d.prefix + "." : "") + (d.subDomain ? d.subDomain + "." : "") + d.mainDomain + "/h5/" + c.api.toLowerCase() + "/" + c.v.toLowerCase() + "/"</div><div class="line">      , g = c.appKey || ("waptest" === d.subDomain ? "4272" : "12574478")</div><div class="line">      , i = (new Date).getTime()</div><div class="line">      , j = h(d.token + "&amp;" + i + "&amp;" + g + "&amp;" + c.data)</div><div class="line">      , k = &#123;</div><div class="line">        jsv: w,</div><div class="line">        appKey: g,</div><div class="line">        t: i,</div><div class="line">        sign: j</div><div class="line">    &#125;</div><div class="line">      , l = &#123;</div><div class="line">        data: c.data,</div><div class="line">        ua: c.ua</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>你可能会问，如何寻找，答案是js断点，一步步调试。</p>
<p>有兴趣的可以持续关注，以后会深入。</p>
<p>好久都没法东西了，主要是最近太忙，加班比较多；自己也变懒了，也在学一些新东西，就不知道写什么好，以后还是勤快点吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1b87ba90b26d4a65d78146dcee21a40e_1200x500.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十二篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;淘宝sign加密算法&lt;/p&gt;
    
    </summary>
    
      <category term="加密算法" scheme="https://zhangslob.github.io/categories/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="加密" scheme="https://zhangslob.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="淘宝" scheme="https://zhangslob.github.io/tags/%E6%B7%98%E5%AE%9D/"/>
    
  </entry>
  
  <entry>
    <title>Python多线程（一）</title>
    <link href="https://zhangslob.github.io/2018/07/28/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://zhangslob.github.io/2018/07/28/Python多线程（一）/</id>
    <published>2018-07-28T07:01:34.000Z</published>
    <updated>2018-07-28T08:13:29.170Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.cn314.com/d/file/xinpin/452214b5930752f61039756c8dc70d67.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十一篇原创文章</div></pre></td></tr></table></figure>
<p>记录自己对多线程的理解  (๑• . •๑)</p>
<a id="more"></a>
<h1 id="线程与影分身"><a href="#线程与影分身" class="headerlink" title="线程与影分身"></a>线程与影分身</h1><p>多线程就是鸣人的<code>影分身之术</code>，可能不大恰当，但是非常容易理解。</p>
<p><img src="https://cf-darren0322.zi.org.tw/wp-content/uploads/2017/09/1504614882-afaa0c0f0d32fd75d061c2aeff07b38f.jpg" alt=""></p>
<p>平时一个鸣人会一个人，但是遇到强敌时，他会使用<code>影分身之术</code>，召唤自己的兄弟来帮助他一起来战斗。这样，他就从一个人战斗变成多个人战斗。</p>
<p>多线程也是这样，平时一个线程去做某件事，当使用多线程后，就会有很多个线程按照命令去做事，就像影分身一样。</p>
<h1 id="Python使用"><a href="#Python使用" class="headerlink" title="Python使用"></a>Python使用</h1><p>鸣人和使用需要先结印</p>
<p><img src="http://i0.qhmsg.com/t01ccd9cfd17482901d.jpg" alt=""></p>
<p>Python 中需要先调用，让我们看一个简单的例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shadow</span><span class="params">(num)</span>:</span></div><div class="line">    print(<span class="string">'产生了第&#123;&#125;个分身...'</span>.format(num))</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</div><div class="line">    t = threading.Thread(target=shadow, args=(i,))</div><div class="line">    t.start()</div><div class="line">    t.join()</div></pre></td></tr></table></figure>
<p>Output</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">产生了第1个分身...</div><div class="line">产生了第2个分身...</div><div class="line">产生了第3个分身...</div><div class="line">产生了第4个分身...</div><div class="line">产生了第5个分身...</div></pre></td></tr></table></figure>
<p>可以看出用法非常简单，只需要先导入<code>threading</code>模块，然后实例化一个线程对象，注意<code>args是</code>元祖</p>
<p><code>t = threading.Thread(target=shadow, args=(i,))</code></p>
<p>线程被创建之后并不会马上运行，需要手动调用 <code>start()</code> ， <code>join()</code> 让调用它的线程一直等待直到执行结束： </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">t.start()</div><div class="line">t.join()</div></pre></td></tr></table></figure>
<h1 id="查看线程名字"><a href="#查看线程名字" class="headerlink" title="查看线程名字"></a>查看线程名字</h1><p>上述例子中，我们只知道产生了多个线程，但还是并不知道具体是哪个线程，如果某个线程出错了，我们没法去追踪，所以我们可以给线程加上名字。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shadow</span><span class="params">(num)</span>:</span></div><div class="line">    print(<span class="string">'&#123;&#125;产生了第&#123;&#125;个分身...'</span>.format(threading.currentThread().getName(), num))</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</div><div class="line">    t = threading.Thread(target=shadow, args=(i,), name=<span class="string">'第&#123;&#125;个鸣人'</span>.format(i))</div><div class="line">    t.start()</div><div class="line">    t.join()</div></pre></td></tr></table></figure>
<p>Out:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">第1个鸣人产生了第1个分身...</div><div class="line">第2个鸣人产生了第2个分身...</div><div class="line">第3个鸣人产生了第3个分身...</div><div class="line">第4个鸣人产生了第4个分身...</div><div class="line">第5个鸣人产生了第5个分身...</div></pre></td></tr></table></figure>
<p>当然，你可以这样</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shadow</span><span class="params">(num)</span>:</span></div><div class="line">    print(<span class="string">'&#123;&#125;产生了第&#123;&#125;个分身...'</span>.format(threading.currentThread().getName(), num))</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</div><div class="line">    t = threading.Thread(target=shadow, args=(i,))</div><div class="line">    t.start()</div><div class="line">    t.join()</div><div class="line"></div><div class="line">print(threading.currentThread().getName())</div></pre></td></tr></table></figure>
<p>Out</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Thread-1产生了第1个分身...</div><div class="line">Thread-2产生了第2个分身...</div><div class="line">Thread-3产生了第3个分身...</div><div class="line">Thread-4产生了第4个分身...</div><div class="line">Thread-5产生了第5个分身...</div><div class="line">MainThread</div></pre></td></tr></table></figure>
<p>你可以看到在所有创建的线程结束后，我们打印当前线程名字，就是主线程<code>MainThread</code></p>
<h1 id="什么时候使用join"><a href="#什么时候使用join" class="headerlink" title="什么时候使用join"></a>什么时候使用join</h1><p>刚开始学多线程时，有个问题困扰了我很久，就是什么时候使用<code>join()</code></p>
<p>缕一缕步骤：</p>
<ol>
<li>主线程中创建子线程t</li>
<li>开始线程<code>t.star()</code></li>
<li>调用<code>t.join()</code></li>
<li>阻塞：等待子线程t结束后，再执行接下来的任务</li>
</ol>
<p>也就是说使用了<code>join()</code>后会阻塞当前的线程，只有这个线程执行完毕后才会接着走。要是一直不结束呢？你可以加上超时时间，如<code>t.join(timeout=10)</code></p>
<h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>鸣人使用影分身后，产生了A、B、C三个小鸣人，鸣人可以使用<code>join()</code>方法，让B在A耗尽查克拉之后再进行攻击，如果没有使用<code>join()</code>，那么就会是这样的场景，大家一起上</p>
<p><img src="https://image.ibb.co/b2AhW8/u_2086124472_3070676486_fm_173_s_C0983_F9_F4_C024_EDA8415_FC6803003079_w_500_h_314_img.jpg" alt=""></p>
<p>这个时候如果鸣人命令A、B同时去写家庭作业，那么可能会产生什么情况呢？A先写还是B先写，大家可以想想。</p>
<p>下一期会说说 <strong>锁 </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.cn314.com/d/file/xinpin/452214b5930752f61039756c8dc70d67.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十一篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;记录自己对多线程的理解  (๑• . •๑)&lt;/p&gt;
    
    </summary>
    
      <category term="多线程" scheme="https://zhangslob.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="https://zhangslob.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>为什么Selenium点不到元素</title>
    <link href="https://zhangslob.github.io/2018/07/24/%E4%B8%BA%E4%BB%80%E4%B9%88Selenium%E7%82%B9%E4%B8%8D%E5%88%B0%E5%85%83%E7%B4%A0/"/>
    <id>https://zhangslob.github.io/2018/07/24/为什么Selenium点不到元素/</id>
    <published>2018-07-24T14:35:10.000Z</published>
    <updated>2018-07-24T15:28:58.537Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/VfFKTnl.jpg" alt=""></p>
<pre><code>这是崔斯特的第六十篇原创文章
</code></pre><p>明明可以显示，为什么就是点不到呢  (๑• . •๑)</p>
<a id="more"></a>
<p>最近做了许多登陆项目，我会优先选择使用requests来模拟请求，但是有些参数实在是很难获取，这个时候我会使用Selenium，也还是遇到了各种坑，也算是见识到了很多的验证措施。</p>
<p>今天说说如何解决selenium点选不到数据的问题。</p>
<h1 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h1><p>这还是最常见的一种情况，推荐最多的是使用显示等待：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</div><div class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</div><div class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</div><div class="line"></div><div class="line">driver = webdriver.Firefox()</div><div class="line">driver.get(<span class="string">"http://somedomain/url_that_delay_loading"</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    element = WebDriverWait(driver,<span class="number">10</span>).until(</div><div class="line">        EC.presence_of_element_located((By.ID,<span class="string">"myDynamicElement"</span>))</div><div class="line">    )</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    driver.quit()</div></pre></td></tr></table></figure>
<p>这段代码会等待10秒，如果10秒内找到元素则立即返回，否则会抛出TimeoutException异常。</p>
<p>但是我比较懒，因为<code>time.sleep()</code>可以达到同样效果。</p>
<h1 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h1><p>官方把它叫做“行为链”。ActionChains可以完成简单的交互行为，例如鼠标移动，鼠标点击事件，键盘输入，以及内容菜单交互。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">click(on_element=None) ——单击鼠标左键</div><div class="line"></div><div class="line">click_and_hold(on_element=None) ——点击鼠标左键，不松开</div><div class="line"></div><div class="line">context_click(on_element=None) ——点击鼠标右键</div><div class="line"></div><div class="line">double_click(on_element=None) ——双击鼠标左键</div><div class="line"></div><div class="line">drag_and_drop(<span class="built_in">source</span>, target) ——拖拽到某个元素然后松开</div><div class="line"></div><div class="line">drag_and_drop_by_offset(<span class="built_in">source</span>, xoffset, yoffset) ——拖拽到某个坐标然后松开</div><div class="line"></div><div class="line">key_down(value, element=None) ——按下某个键盘上的键</div><div class="line"></div><div class="line">key_up(value, element=None) ——松开某个键</div><div class="line"></div><div class="line">move_by_offset(xoffset, yoffset) ——鼠标从当前位置移动到某个坐标</div><div class="line"></div><div class="line">move_to_element(to_element) ——鼠标移动到某个元素</div><div class="line"></div><div class="line">move_to_element_with_offset(to_element, xoffset, yoffset) ——移动到距某个元素（左上角坐标）多少距离的位置</div><div class="line"></div><div class="line">perform() ——执行链中的所有动作</div><div class="line"></div><div class="line">release(on_element=None) ——在某个元素位置松开鼠标左键</div><div class="line"></div><div class="line">send_keys(*keys_to_send) ——发送某个键到当前焦点的元素</div><div class="line"></div><div class="line">send_keys_to_element(element, *keys_to_send) ——发送某个键到指定元素</div></pre></td></tr></table></figure>
<p>深入了解可以参考 <a href="https://blog.csdn.net/huilan_same/article/details/52305176" target="_blank" rel="external">https://blog.csdn.net/huilan_same/article/details/52305176</a></p>
<p><code>move_to_element_with_offset</code>和<code>click_and_hold</code>会经常用到破解验证码中。</p>
<h1 id="触摸操作-TouchAction"><a href="#触摸操作-TouchAction" class="headerlink" title="触摸操作 (TouchAction)"></a>触摸操作 (TouchAction)</h1><p><strong>该事件仅仅针对移动端、触屏版</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">flick_element(on_element, xoffset, yoffset, speed) <span class="comment"># 以元素为起点以一定速度向下滑动</span></div><div class="line">scroll_from_element(on_element xoffset yoffset) <span class="comment">#以元素为起点向下滑动</span></div><div class="line">double_tap(on_element)                                     <span class="comment">#双击   </span></div><div class="line">flick_element(on_element, xoffset, yoffset, speed)         <span class="comment">#从元素开始以指定的速度移动</span></div><div class="line">long_press(on_element)　　                                          <span class="comment">#长按不释放</span></div><div class="line">move(xcoord, ycoord)　　                                              <span class="comment">#移动到指定的位置</span></div><div class="line">perform()　　                                                                  <span class="comment">#执行链中的所有动作</span></div><div class="line">release(xcoord, ycoord)　　                                           <span class="comment">#在某个位置松开操作</span></div><div class="line">scroll(xoffset, yoffset)                                                      <span class="comment">#滚动到某个位置</span></div><div class="line">scroll_from_element(on_element, xoffset, yoffset)         <span class="comment">#从某元素开始滚动到某个位置</span></div><div class="line">tap(on_element)                                                             <span class="comment">#单击</span></div><div class="line">tap_and_hold(xcoord, ycoord)                                        <span class="comment">#某点按住</span></div></pre></td></tr></table></figure>
<p>为什么要说到移动端，在做登陆时，移动端往往会更加简单，但是触屏版的点击和PC端时完全不同的，点击与按住时不同的。</p>
<p>在某个项目我换成<code>TouchAction</code>后，神奇的发现，注册不再需要处理验证码了，真是太棒了。</p>
<h1 id="使用js"><a href="#使用js" class="headerlink" title="使用js"></a>使用js</h1><p>当你使用浏览器已经找到该元素，使用<code>click()</code>方法但是不起作用时，这个时候建议尝试js，例如在我的主页 <a href="https://www.zhihu.com/people/cuishite/activities，点击" target="_blank" rel="external">https://www.zhihu.com/people/cuishite/activities，点击</a> “查看详细资料”</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">js = <span class="string">'document.getElementsByClassName("Button ProfileHeader-expandButton Button--plain")[0].click();'</span></div><div class="line">driver.execute_script(js)</div></pre></td></tr></table></figure>
<p>你可以先在控制台调试</p>
<p><img src="https://i.imgur.com/kyz089A.png" alt=""></p>
<p>js通常可以解决绝大多是问题，如果还是解决不了，那你可能和我遇到了同样的问题，比如说，我在处理某移动端网站登陆，处理如下验证码时，我会使用到<code>move_to_element_with_offset</code>，该方法是“移动到距某个元素（左上角坐标）多少距离的位置”。</p>
<p>计算出坐标后，会调用该方法，如<code>action.move_to_element_with_offset(element, width, height).click().perform()</code>，然而实际上问题并没有这么简单，多次点击失效。具体的有时间再说。</p>
<p><img src="https://i.imgur.com/5KXib4o.png" alt=""></p>
<h1 id="实用方法"><a href="#实用方法" class="headerlink" title="实用方法"></a>实用方法</h1><p><strong>提取selenium的cookies</strong></p>
<p>介绍把selenium的cookies船体给requests使用的方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cookies = driver.get_cookies()</div><div class="line"></div><div class="line">s = requests.Session()</div><div class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</div><div class="line">    s.cookies.set(cookie[<span class="string">'name'</span>], cookie[<span class="string">'value'</span>])</div></pre></td></tr></table></figure>
<p><a href="https://stackoverflow.com/questions/29563335/how-do-i-load-session-and-cookies-from-selenium-browser-to-requests-library-in-p" target="_blank" rel="external">How do I load session and cookies from Selenium browser to requests library in Python?</a></p>
<p><strong>元素截图方法</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">fox = webdriver.Firefox()</div><div class="line">fox.get(<span class="string">'https://stackoverflow.com/'</span>)</div><div class="line"></div><div class="line"><span class="comment"># now that we have the preliminary stuff out of the way time to get that image :D</span></div><div class="line">element = fox.find_element_by_id(<span class="string">'hlogo'</span>) <span class="comment"># find part of the page you want image of</span></div><div class="line">location = element.location</div><div class="line">size = element.size</div><div class="line">fox.save_screenshot(<span class="string">'screenshot.png'</span>) <span class="comment"># saves screenshot of entire page</span></div><div class="line">fox.quit()</div><div class="line"></div><div class="line">im = Image.open(<span class="string">'screenshot.png'</span>) <span class="comment"># uses PIL library to open image in memory</span></div><div class="line"></div><div class="line">left = location[<span class="string">'x'</span>]</div><div class="line">top = location[<span class="string">'y'</span>]</div><div class="line">right = location[<span class="string">'x'</span>] + size[<span class="string">'width'</span>]</div><div class="line">bottom = location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>]</div><div class="line"></div><div class="line"></div><div class="line">im = im.crop((left, top, right, bottom)) <span class="comment"># defines crop points</span></div><div class="line">im.save(<span class="string">'screenshot.png'</span>) <span class="comment"># saves new cropped image</span></div></pre></td></tr></table></figure>
<p><a href="https://stackoverflow.com/questions/37564932/selenium-cannot-screenshot-a-web-element" target="_blank" rel="external">selenium cannot screenshot a web element</a></p>
<p>最后推荐一个神器 <a href="https://github.com/appium/python-client" target="_blank" rel="external">appium/python-client</a></p>
<p>至于验证码部分，现在主要还是靠第三方工具，并没有自己尝试机器学习等方法处理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/VfFKTnl.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这是崔斯特的第六十篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;明明可以显示，为什么就是点不到呢  (๑• . •๑)&lt;/p&gt;
    
    </summary>
    
      <category term="Selenium" scheme="https://zhangslob.github.io/categories/Selenium/"/>
    
    
      <category term="Selenium" scheme="https://zhangslob.github.io/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>使用Selenium与Requests模拟登陆</title>
    <link href="https://zhangslob.github.io/2018/07/17/%E4%BD%BF%E7%94%A8Selenium%E4%B8%8ERequests%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86/"/>
    <id>https://zhangslob.github.io/2018/07/17/使用Selenium与Requests模拟登陆/</id>
    <published>2018-07-17T13:18:35.000Z</published>
    <updated>2018-07-17T13:47:14.505Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://preview.ibb.co/cd5VUJ/20180717173128.png" alt=""></p>
<pre><code>这是崔斯特的第五十九篇原创文章
</code></pre><p>模拟登陆的两种方式，你喜欢哪种  (๑• . •๑)</p>
<a id="more"></a>
<p>本期讲一讲模拟登录相关的东西，目标网站是<a href="https://github.com/" target="_blank" rel="external">Github</a></p>
<p><img src="https://preview.ibb.co/cd5VUJ/20180717173128.png" alt=""></p>
<h1 id="简单的Selnium"><a href="#简单的Selnium" class="headerlink" title="简单的Selnium"></a>简单的Selnium</h1><p>想说说简单的方法，使用浏览器登录，基本上就是傻瓜操作了。</p>
<p>如上图所示，登录设计的很简单，没有验证码什么的，代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line">driver = webdriver.Chrome()</div><div class="line">driver.maximize_window()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(account, password)</span>:</span></div><div class="line">    driver.get(<span class="string">'https://github.com/login'</span>)</div><div class="line">    time.sleep(<span class="number">2</span>)</div><div class="line">    driver.find_element_by_id(<span class="string">'login_field'</span>).send_keys(account)</div><div class="line">    driver.find_element_by_id(<span class="string">'password'</span>).send_keys(password)</div><div class="line">    driver.find_element_by_xpath(<span class="string">'//input[@class="btn btn-primary btn-block"]'</span>).click()</div><div class="line">    <span class="comment"># do whatever you want</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    account, password = <span class="string">'account'</span>, <span class="string">'password'</span></div><div class="line">    login(account, password)</div></pre></td></tr></table></figure>
<h1 id="分析请求之Requests"><a href="#分析请求之Requests" class="headerlink" title="分析请求之Requests"></a>分析请求之Requests</h1><p>打开F12，使用错误的账号密码登录，复制curl</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">'https://github.com/session'</span> -H <span class="string">'Cookie: has_recent_activity=1; _octo=GH1.1.1477592343.1531820067; logged_in=no; _gh_sess=UEZzYnVCMVlhNkVOdE5rU1hWRFpDbmFlY0UyQ1Y2b3Z4TGw2NFlTMmJLUWk5VENVQ3Q4TWxiSWN5ckEyZXN0MUFkT29XVjQvbWJVbm9RV0JNQmc1TmU0UnBtK0taUXJpcElqUk5PNGZ5TjZOQ2ZPRVR4NU5WQXcrb2xWRnRBMnRPMkRWYzYvWmVGY0FrYU12Q3BVVTY3dXVSblliNG4rWjc2QXVwR2pjQ1pzZXM1MFk1MjU5OUw2WkFLTU1BMzJDWGlTeXliNzNaejlUaW43cWhFNzQ0MFFVVmJ1aEppbzdtQTZkRERmUm5mWExkRDlmWW5lNk9mdlFYb05MQUtubDZBbXFJWjV6eFhic3JiWlRtZ2QxZ2FqZUxnOGFheUgzaXJmc290b0Jma09pRTJZdHZySEVmdVdGZHVBU3ZTVTJRM0pESnE1N1VPRDM0ck9FZzNJZTN5VWljUktyZ3FZQU16THVBeFBXV3BNPS0tSDh4WVV6U2RSNjlBL3FNQ3VaRGxEUT09--71cf0886128d55b42c82cf6f7b76e007ebfdc77b; _ga=GA1.2.57857743.1531820085; _gat=1; tz=Asia%2FShanghai'</span> -H <span class="string">'Origin: https://github.com'</span> -H <span class="string">'Accept-Encoding: gzip, deflate, br'</span> -H <span class="string">'Accept-Language: zh-CN,zh;q=0.9,en;q=0.8'</span> -H <span class="string">'Upgrade-Insecure-Requests: 1'</span> -H <span class="string">'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'</span> -H <span class="string">'Content-Type: application/x-www-form-urlencoded'</span> -H <span class="string">'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span> -H <span class="string">'Cache-Control: max-age=0'</span> -H <span class="string">'Referer: https://github.com/login'</span> -H <span class="string">'Connection: keep-alive'</span> --data <span class="string">'commit=Sign+in&amp;utf8=%E2%9C%93&amp;authenticity_token=%2BtgUHwMIxnoHOHNMqQFkLak9mJzrxt%2B4yfFiZaf66WiMB5ZyRaVXq%2BFpZsM%2BtxgaRRX6Fzfezu1IdRqy%2BTGHwg%3D%3D&amp;login=123456788%40gmail.com&amp;password=123456788'</span> --compressed</div></pre></td></tr></table></figure>
<p>转为Python代码，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">cookies = &#123;</div><div class="line">    <span class="string">'has_recent_activity'</span>: <span class="string">'1'</span>,</div><div class="line">    <span class="string">'_octo'</span>: <span class="string">'GH1.1.1477592343.1531820067'</span>,</div><div class="line">    <span class="string">'logged_in'</span>: <span class="string">'no'</span>,</div><div class="line">    <span class="string">'_gh_sess'</span>: <span class="string">'UEZzYnVCMVlhNkVOdE5rU1hWRFpDbmFlY0UyQ1Y2b3Z4TGw2NFlTMmJLUWk5VENVQ3Q4TWxiSWN5ckEyZXN0MUFkT29XVjQvbWJVbm9RV0JNQmc1TmU0UnBtK0taUXJpcElqUk5PNGZ5TjZOQ2ZPRVR4NU5WQXcrb2xWRnRBMnRPMkRWYzYvWmVGY0FrYU12Q3BVVTY3dXVSblliNG4rWjc2QXVwR2pjQ1pzZXM1MFk1MjU5OUw2WkFLTU1BMzJDWGlTeXliNzNaejlUaW43cWhFNzQ0MFFVVmJ1aEppbzdtQTZkRERmUm5mWExkRDlmWW5lNk9mdlFYb05MQUtubDZBbXFJWjV6eFhic3JiWlRtZ2QxZ2FqZUxnOGFheUgzaXJmc290b0Jma09pRTJZdHZySEVmdVdGZHVBU3ZTVTJRM0pESnE1N1VPRDM0ck9FZzNJZTN5VWljUktyZ3FZQU16THVBeFBXV3BNPS0tSDh4WVV6U2RSNjlBL3FNQ3VaRGxEUT09--71cf0886128d55b42c82cf6f7b76e007ebfdc77b'</span>,</div><div class="line">    <span class="string">'_ga'</span>: <span class="string">'GA1.2.57857743.1531820085'</span>,</div><div class="line">    <span class="string">'_gat'</span>: <span class="string">'1'</span>,</div><div class="line">    <span class="string">'tz'</span>: <span class="string">'Asia%2FShanghai'</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'Origin'</span>: <span class="string">'https://github.com'</span>,</div><div class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</div><div class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9,en;q=0.8'</span>,</div><div class="line">    <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</div><div class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'</span>,</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</div><div class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span>,</div><div class="line">    <span class="string">'Cache-Control'</span>: <span class="string">'max-age=0'</span>,</div><div class="line">    <span class="string">'Referer'</span>: <span class="string">'https://github.com/login'</span>,</div><div class="line">    <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line">data = [</div><div class="line">  (<span class="string">'commit'</span>, <span class="string">'Sign in'</span>),</div><div class="line">  (<span class="string">'utf8'</span>, <span class="string">'\u2713'</span>),</div><div class="line">  (<span class="string">'authenticity_token'</span>, <span class="string">'+tgUHwMIxnoHOHNMqQFkLak9mJzrxt+4yfFiZaf66WiMB5ZyRaVXq+FpZsM+txgaRRX6Fzfezu1IdRqy+TGHwg=='</span>),</div><div class="line">  (<span class="string">'login'</span>, <span class="string">'123456788@gmail.com'</span>),</div><div class="line">  (<span class="string">'password'</span>, <span class="string">'123456788'</span>),</div><div class="line">]</div><div class="line"></div><div class="line">response = requests.post(<span class="string">'https://github.com/session'</span>, headers=headers, cookies=cookies, data=data)</div></pre></td></tr></table></figure>
<p>注意两个地方，cookies和参数，先来看看参数，稍微特别的就是<code>authenticity_token</code>，感觉是验证。<code>Ctrl+Shift+F</code>打开搜索，最终在返回的html中找到</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- '"` --&gt;</span><span class="comment">&lt;!-- &lt;/textarea&gt;&lt;/xmp&gt; --&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/session"</span> <span class="attr">accept-charset</span>=<span class="string">"UTF-8"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"utf8"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"&amp;#x2713;"</span> /&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"authenticity_token"</span> <span class="attr">value</span>=<span class="string">"CTujn/pHGMQBpEhYcJj9Mn6ChsNSkd5ul8rgNSP/6/KxdZlhS0ABKblsq1pLn6EaQvIGLMzl/IQawaDL8KFjDw=="</span> /&gt;</span>      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"auth-form-header p-0"</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>authenticity_token</code>解决了，下一步想办法获取cookies</p>
<p><img src="https://preview.ibb.co/iSWqwy/20180717174236.png" alt=""></p>
<p>继续搜索<code>_gh_sess</code>与<code>_octo</code>关键字，看到有这样一段js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> e, t = <span class="keyword">void</span> <span class="number">0</span>, r = <span class="keyword">void</span> <span class="number">0</span>, n = <span class="keyword">this</span>._getCookie(<span class="string">"_octo"</span>), a = [];</div></pre></td></tr></table></figure>
<p>猜测cookies不是本地生成，查看打开Github首页的请求，果然在<code>Response Cookies</code>中找到了相关数据，那么使用<code>Session</code>就可以维持会话了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span>,</div><div class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</div><div class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9,en;q=0.8'</span>,</div><div class="line">    <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</div><div class="line">    <span class="string">'Host'</span>: <span class="string">'github.com'</span>,</div><div class="line">    <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</div><div class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">s = requests.session()</div><div class="line">s.headers.update(headers)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">()</span>:</span></div><div class="line">    url = <span class="string">'https://github.com/login'</span></div><div class="line">    response = s.get(url)</div><div class="line">    pat = <span class="string">'name=\"authenticity_token\" value=\"(.*?)\"'</span></div><div class="line">    authenticity_token = re.findall(pat, response.text)[<span class="number">0</span>]</div><div class="line">    <span class="keyword">return</span> authenticity_token</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(authenticity_token, account, password)</span>:</span></div><div class="line">    payload = &#123;</div><div class="line">        <span class="string">'commit'</span>: <span class="string">'Sign in'</span>,</div><div class="line">        <span class="string">'utf8'</span>: <span class="string">'\u2713'</span>,</div><div class="line">        <span class="string">'authenticity_token'</span>: authenticity_token,</div><div class="line">        <span class="string">'login'</span>: account,</div><div class="line">        <span class="string">'password'</span>: password,</div><div class="line">    &#125;</div><div class="line">    url = <span class="string">'https://github.com/session'</span></div><div class="line">    response = s.post(url, data=payload)</div><div class="line">    print(response)</div><div class="line">    <span class="comment"># do whatever you want</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    account, password = <span class="string">'account'</span>, <span class="string">'password'</span></div><div class="line">    authenticity_token = get_token()</div><div class="line">    login(authenticity_token, account, password)</div></pre></td></tr></table></figure>
<h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>Selenium：</p>
<ul>
<li>优点：简单、无脑，不用分析复杂的网页请求，不用保持会话状态</li>
<li>缺点：速度慢，速度慢，速度慢（某些情况下会出现js加载不全）</li>
</ul>
<p><img src="http://www.goalsinfocloud.com/wp-content/uploads/2018/02/selenium.png" alt=""></p>
<p>Requests：</p>
<ul>
<li>优点：速度快，可以增加自己对cookies登陆的理解</li>
<li>缺点：需要花时间寻找相关参数</li>
</ul>
<p><img src="http://docs.python-requests.org/en/master/_static/requests-sidebar.png" alt=""></p>
<p>如果对Github感兴趣，可以直接使用 <a href="https://developer.github.com/v3/" target="_blank" rel="external">Github API</a></p>
<p>最近在使用<code>Selenium</code>处理验证码，发现很强大，如果模拟请求，难度会非常大。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://preview.ibb.co/cd5VUJ/20180717173128.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这是崔斯特的第五十九篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;模拟登陆的两种方式，你喜欢哪种  (๑• . •๑)&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://zhangslob.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Selenium" scheme="https://zhangslob.github.io/tags/Selenium/"/>
    
      <category term="Requests" scheme="https://zhangslob.github.io/tags/Requests/"/>
    
  </entry>
  
  <entry>
    <title>说说最近遇到的反爬</title>
    <link href="https://zhangslob.github.io/2018/07/10/%E8%AF%B4%E8%AF%B4%E6%9C%80%E8%BF%91%E9%81%87%E5%88%B0%E7%9A%84%E5%8F%8D%E7%88%AC/"/>
    <id>https://zhangslob.github.io/2018/07/10/说说最近遇到的反爬/</id>
    <published>2018-07-10T15:07:44.000Z</published>
    <updated>2018-07-10T15:13:23.022Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第五十八篇原创文章
</code></pre><p>爬虫与反爬  (๑• . •๑)</p>
<p><img src="https://i.imgur.com/qb1MMqd.jpg" alt=""></p>
<a id="more"></a>
<h1 id="参数加密"><a href="#参数加密" class="headerlink" title="参数加密"></a>参数加密</h1><p>参数加密指的是在请求中需要加上类似<code>token</code>、<code>uuid</code> 字段，例如在某个请求中<code>query string parameters</code>中有<code>_token</code>和<code>uuid</code>、<code>customerKey</code>等字段，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_token:eJyN0l9L40AQAPDvsg8+hWZ2</div><div class="line">uuid:59851b5e-92b4<span class="_">-f</span>1f5-19e2<span class="_">-d</span>8148bf7e</div><div class="line">customerKey:0356982437</div></pre></td></tr></table></figure>
<p><strong>解决方法</strong></p>
<p>刚开始遇到这个是一脸懵逼的，验证发现有些参数不是必须的，比如<code>uuid</code>，<code>uuid</code>在维基百科上是：通用唯一识别码，估计没啥作用，python也有内置的uuid生成库 <a href="https://docs.python.org/3/library/uuid.html" target="_blank" rel="external">uuid — UUID objects according to RFC 4122</a></p>
<p>问了前端大佬，得知需要在js中打断点，一点点调试，最后终于解决，<code>_token</code>是二次加密的。</p>
<p>给大家看一下该网站的部分代码。看看描述：<strong>获得反爬虫的_toke</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获得反爬虫的_token</div><div class="line"> * @param &#123;*&#125; url </div><div class="line"> * @param &#123;*&#125; queryParams </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRohrToken</span>(<span class="params">host, queryParams</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.Rohr_Opt &amp;&amp; <span class="built_in">window</span>.Rohr_Opt.reload) &#123;</div><div class="line">        <span class="keyword">var</span> rohr = <span class="built_in">window</span>.Rohr_Opt;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> _token = <span class="string">''</span>;</div><div class="line">        <span class="keyword">var</span> params = queryParams</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> params == <span class="string">'string'</span> &amp;&amp; params.indexOf(<span class="string">'_fb_='</span>) !== <span class="number">-1</span>) &#123;</div><div class="line">            params = <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> queryString = toQueryString(params);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> _url = location.protocol + host + <span class="string">'?'</span> + queryString;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            _token = rohr.reload(_url) || <span class="string">''</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'获取token失败:'</span> + e)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> _token;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于如何调试，这里有教程，<a href="http://wiki.jikexueyuan.com/project/chrome-devtools/debugging-javascript.html" target="_blank" rel="external">调试 JavaScript 脚本</a> </p>
<blockquote>
<p>这里还有另一种app抓包加密情况，暂时还没接触过，听过是需要反编译apk包，然后阅读代码。</p>
</blockquote>
<h1 id="登录问题"><a href="#登录问题" class="headerlink" title="登录问题"></a>登录问题</h1><p>很多网站数据是登录可见，那么就必须要开发该网站的登录系统了。</p>
<p>登录可能会遇到的一些问题：</p>
<ol>
<li>登录过程中遇到的验证码（下面会说）</li>
<li>cookies持久化问题</li>
<li>账号被封禁问题</li>
</ol>
<p><strong>解决方法</strong></p>
<ul>
<li><p>登录账号获得<code>cookies</code>后，经过一段时间，<code>cookies</code>就可能会失效，具体网站情况不同，这时候就必须有个脚本，来保证<code>cookies</code>有效</p>
</li>
<li><p>账号做出一些跟正常用户不同的操作就会产生异常，别人很容易就发现。所以就让你的账号像正常人一样。</p>
</li>
</ul>
<p>最近看到有人再问豆瓣登录采集影评导致被封号的事情，豆瓣我以前也被封过，到现在也没有解封</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">依据用户管理细则，此帐号已被永久停用。停用时间:2017-09-29</div><div class="line">如有疑问，请发送邮件到<span class="built_in">help</span>@douban.com</div></pre></td></tr></table></figure>
<p>我的建议是：</p>
<ol>
<li>有能力的多注册账号，账号被封了就再去注册呗</li>
<li>手机app抓包，app不需要登录，而且可以持续抓最新评论</li>
</ol>
<h1 id="图形验证码"><a href="#图形验证码" class="headerlink" title="图形验证码"></a>图形验证码</h1><p>验证码一直是反爬虫利器，从简单的数字识别，到复杂的滑动拼图、图片点选等等。有兴趣的来试试破解 <a href="http://dun.163.com/trial/picture-click" target="_blank" rel="external">网易云易盾</a>，感觉很头疼。</p>
<p><img src="https://image.ibb.co/ebAMMo/20180710202053.png" alt=""></p>
<p><strong>解决方法</strong></p>
<p>例如上图，这是我现在遇到的一种验证码情况，依次点击几个文字。</p>
<p>如果是自己来做的话，会考虑这样：</p>
<ol>
<li>将验证码图片部分截图或下载回来</li>
<li>对图片进行OCR，提取文字</li>
<li>文字识别，获取坐标</li>
<li>使用<code>selenium</code>根据坐标点击</li>
</ol>
<p>这只是初步思路，但想法很容易，做起来却没那么简单。</p>
<p>在Github上找到大佬写的方法 <a href="https://github.com/cos120/captcha_crack" target="_blank" rel="external">captcha_crack</a>，知乎上也有 <a href="https://zhuanlan.zhihu.com/p/34186397" target="_blank" rel="external">使用深度学习破解点击验证码</a></p>
<p>那么如果直接接入第三方打码平台来，那就会简单很多，在实际开发中为了提高准确性，更多会使用打码平台。</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第五十八篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;爬虫与反爬  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/qb1MMqd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://zhangslob.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="反爬" scheme="https://zhangslob.github.io/tags/%E5%8F%8D%E7%88%AC/"/>
    
  </entry>
  
  <entry>
    <title>快速写一个爬虫</title>
    <link href="https://zhangslob.github.io/2018/07/03/%E5%BF%AB%E9%80%9F%E5%86%99%E4%B8%80%E4%B8%AA%E7%88%AC%E8%99%AB/"/>
    <id>https://zhangslob.github.io/2018/07/03/快速写一个爬虫/</id>
    <published>2018-07-03T15:20:52.732Z</published>
    <updated>2018-07-03T15:20:52.732Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第五十七篇原创文章
</code></pre><p>快、更快  (๑• . •๑)</p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1530640088638&amp;di=367da0e00206dae5988d7515df52c2a9&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D1476255146%2C3695215484%26fm%3D214%26gp%3D0.jpg" alt=""></p>
<a id="more"></a>
<h1 id="缘来"><a href="#缘来" class="headerlink" title="缘来"></a>缘来</h1><p>今天下班前，老板让我帮忙爬一个数据，简单看了下，需要登录，看起来应该不难。回到家，注册一个账号，复制<code>url</code>，然后用postman转代码，简单暴力，直接撸。</p>
<blockquote>
<p>这里说下postman的一个BUG，发送请求不会获得任何数据，如果你遇到，建议升级postman为最新版本</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> traceback</div><div class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</div><div class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urljoin</div><div class="line"><span class="keyword">from</span> scrapy.selector <span class="keyword">import</span> Selector</div><div class="line"></div><div class="line"></div><div class="line">logging.basicConfig(level=logging.INFO)</div><div class="line"></div><div class="line">client = pymongo.MongoClient()</div><div class="line">coll = client[<span class="string">'table'</span>][<span class="string">'collection'</span>]</div><div class="line"><span class="comment"># coll.create_index('url', unique=True)</span></div><div class="line"></div><div class="line">url = <span class="string">"your urls"</span></div><div class="line"></div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'user-agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 "</span></div><div class="line">                  <span class="string">"(KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36"</span>,</div><div class="line">    <span class="string">'accept'</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"</span>,</div><div class="line">    <span class="string">'accept-encoding'</span>: <span class="string">"gzip, deflate, br"</span>,</div><div class="line">    <span class="string">'accept-language'</span>: <span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span>,</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch</span><span class="params">(page)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        proxies = &#123;</div><div class="line">            <span class="string">'http'</span>: proxy,</div><div class="line">            <span class="string">'https'</span>: proxy</div><div class="line">        &#125;</div><div class="line">        response = requests.get(url.format(page), headers=headers, timeout=<span class="number">20</span>, proxies=proxies)</div><div class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</div><div class="line">            s = Selector(text=response.text)</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> s.xpath(<span class="string">'//*[@id="search-results"]/tbody/tr'</span>):</div><div class="line">                url_ = i.xpath(<span class="string">'td[4]/a/@href'</span>).extract_first()</div><div class="line">                detail_url = urljoin(url, url_)</div><div class="line">                data = get_detail(detail_url)</div><div class="line">                logging.info(<span class="string">'success save data &#123;&#125; '</span>.format(data[<span class="string">'url'</span>]))</div><div class="line">                save_mongo(data)</div><div class="line"></div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        logging.error(traceback.format_exc())</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail</span><span class="params">(detail_url)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        proxies = &#123;</div><div class="line">            <span class="string">'http'</span>: proxy,</div><div class="line">            <span class="string">'https'</span>: proxy</div><div class="line">        &#125;</div><div class="line">        response = requests.get(detail_url, headers=headers, timeout=<span class="number">20</span>, proxies=proxies)</div><div class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</div><div class="line">            s = Selector(text=response.text)</div><div class="line">            data = dict()</div><div class="line">            data[<span class="string">'url'</span>] = detail_url</div><div class="line">            data[<span class="string">'SMILES '</span>] = s.xpath(<span class="string">'//*[@id="smiles"]/text()'</span>).extract_first()</div><div class="line">            img = s.xpath(<span class="string">'//*[@id="molecule-image"]/img/@src'</span>).extract_first()</div><div class="line">            data[<span class="string">'img'</span>] = urljoin(detail_url, img)</div><div class="line">            data[<span class="string">'formula'</span>] = s.xpath(<span class="string">'//*[@id="name-structure"]/tbody/tr[2]/td[2]/text()'</span>).extract_first()</div><div class="line">            data[<span class="string">'Mass'</span>] = s.xpath(<span class="string">'//*[@id="name-structure"]/tbody/tr[3]/td[2]/text()'</span>).extract_first()</div><div class="line"></div><div class="line">            <span class="keyword">return</span> data</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        logging.error(traceback.format_exc())</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_mongo</span><span class="params">(data)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        coll.insert(data)</div><div class="line">    <span class="keyword">except</span> pymongo.errors.DuplicateKeyError:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># for i in range(1, 11):</span></div><div class="line">    <span class="comment">#     fetch(str(i))</span></div><div class="line"></div><div class="line">    <span class="comment"># if use Thread</span></div><div class="line">    <span class="keyword">with</span> futures.ThreadPoolExecutor(max_workers=<span class="number">50</span>) <span class="keyword">as</span> executor:</div><div class="line">            to_do = []</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</div><div class="line">                future = executor.submit(fetch, str(i))</div><div class="line">                to_do.append(future)</div></pre></td></tr></table></figure>
<p>代码相当简单，<code>fetch</code>函数用来抓取列表页，<code>get_detail</code>函数抓取详情页，<code>save_mongo</code>保存数据库，需要说明下的就是最后使用的多线程了，这里号使用的是<code>futures</code>，并不想说很多大道理，来看看<a href="https://docs.python.org/3/library/concurrent.futures.html" target="_blank" rel="external">文档</a></p>
<h1 id="提高速度"><a href="#提高速度" class="headerlink" title="提高速度"></a>提高速度</h1><p>concurrent.futures 是python3新增加的一个库，用于并发处理，提供了多线程和多进程的并发功能 </p>
<p><strong>线程池</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> concurrent.futures</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"></div><div class="line">URLS = [<span class="string">'http://www.foxnews.com/'</span>,</div><div class="line">        <span class="string">'http://www.cnn.com/'</span>,</div><div class="line">        <span class="string">'http://europe.wsj.com/'</span>,</div><div class="line">        <span class="string">'http://www.bbc.co.uk/'</span>,</div><div class="line">        <span class="string">'http://some-made-up-domain.com/'</span>]</div><div class="line"></div><div class="line"><span class="comment"># Retrieve a single page and report the URL and contents</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_url</span><span class="params">(url, timeout)</span>:</span></div><div class="line">    <span class="keyword">with</span> urllib.request.urlopen(url, timeout=timeout) <span class="keyword">as</span> conn:</div><div class="line">        <span class="keyword">return</span> conn.read()</div><div class="line"></div><div class="line"><span class="comment"># We can use a with statement to ensure threads are cleaned up promptly</span></div><div class="line"><span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> executor:</div><div class="line">    <span class="comment"># Start the load operations and mark each future with its URL</span></div><div class="line">    future_to_url = &#123;executor.submit(load_url, url, <span class="number">60</span>): url <span class="keyword">for</span> url <span class="keyword">in</span> URLS&#125;</div><div class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> concurrent.futures.as_completed(future_to_url):</div><div class="line">        url = future_to_url[future]</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            data = future.result()</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</div><div class="line">            print(<span class="string">'%r generated an exception: %s'</span> % (url, exc))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'%r page is %d bytes'</span> % (url, len(data)))</div></pre></td></tr></table></figure>
<p><strong>进程池</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> concurrent.futures</div><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line">PRIMES = [</div><div class="line">    <span class="number">112272535095293</span>,</div><div class="line">    <span class="number">112582705942171</span>,</div><div class="line">    <span class="number">112272535095293</span>,</div><div class="line">    <span class="number">115280095190773</span>,</div><div class="line">    <span class="number">115797848077099</span>,</div><div class="line">    <span class="number">1099726899285419</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    sqrt_n = int(math.floor(math.sqrt(n)))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, sqrt_n + <span class="number">1</span>, <span class="number">2</span>):</div><div class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">with</span> concurrent.futures.ProcessPoolExecutor() <span class="keyword">as</span> executor:</div><div class="line">        <span class="keyword">for</span> number, prime <span class="keyword">in</span> zip(PRIMES, executor.map(is_prime, PRIMES)):</div><div class="line">            print(<span class="string">'%d is prime: %s'</span> % (number, prime))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<p>关于入库方面，建议是增加唯一索引， <code>coll.create_index(&#39;url&#39;, unique=True)</code>，一个是去重，一个是提高查询速度。</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第五十七篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;快、更快  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1530640088638&amp;amp;di=367da0e00206dae5988d7515df52c2a9&amp;amp;imgtype=jpg&amp;amp;src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D1476255146%2C3695215484%26fm%3D214%26gp%3D0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>Katalon + 傻瓜 == selenium</title>
    <link href="https://zhangslob.github.io/2018/06/25/Katalon-selenium-%E5%82%BB%E7%93%9C/"/>
    <id>https://zhangslob.github.io/2018/06/25/Katalon-selenium-傻瓜/</id>
    <published>2018-06-25T13:58:25.816Z</published>
    <updated>2018-06-25T13:58:25.816Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第五十六篇原创文章
</code></pre><p>简直是神器啊  (๑• . •๑)</p>
<p><img src="https://i.imgur.com/dIxaOYj.png" alt=""></p>
<a id="more"></a>
<p>今天在翻莫烦大大的博客时，看到他提到一个工具，便去看了下，第一感受是，太好用了、爱不释手。</p>
<p>下面来说说这个工具：Katalon Recorder</p>
<h1 id="Katalon-Recorder"><a href="#Katalon-Recorder" class="headerlink" title="Katalon Recorder"></a>Katalon Recorder</h1><p>安装地址：<a href="https://chrome.google.com/webstore/detail/katalon-recorder-selenium/ljdobmomdgdljniojadhoplhkpialdid/related" target="_blank" rel="external">Katalon Recorder</a></p>
<p>官方介绍是：</p>
<blockquote>
<p>Best Selenium IDE record, play, debug app. Exports Selenium WebDriver code. Provides reports, logs, screenshots. Fast &amp; extensible. </p>
</blockquote>
<p>简单来说，他可以记录你在浏览器上的每一个动作，包括、点击、输入、输入字符等等，最后一键转化为编程代码，可以转化的语言有：</p>
<ol>
<li>C#</li>
<li>JAVA</li>
<li>Katalon Studio</li>
<li>Python2</li>
<li>Roboot Framework</li>
<li>Ruby</li>
<li>XML</li>
</ol>
<p>例如下图就是直接转化为 Python2的代码</p>
<p><img src="https://i.imgur.com/q6t07p3.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</div><div class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</div><div class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</div><div class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoAlertPresentException</div><div class="line"><span class="keyword">import</span> unittest, time, re</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UntitledTestCase</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></div><div class="line">        self.driver = webdriver.Firefox()</div><div class="line">        self.driver.implicitly_wait(<span class="number">30</span>)</div><div class="line">        self.base_url = <span class="string">"https://www.katalon.com/"</span></div><div class="line">        self.verificationErrors = []</div><div class="line">        self.accept_next_alert = <span class="keyword">True</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_untitled_test_case</span><span class="params">(self)</span>:</span></div><div class="line">        driver = self.driver</div><div class="line">        driver.get(<span class="string">"https://zhangslob.github.io/"</span>)</div><div class="line">        driver.find_element_by_link_text(<span class="string">u"Cookies池的后续解决方案"</span>).click()</div><div class="line">        driver.find_element_by_xpath(<span class="string">"//main[@id='main']/div/div"</span>).click()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_element_present</span><span class="params">(self, how, what)</span>:</span></div><div class="line">        <span class="keyword">try</span>: self.driver.find_element(by=how, value=what)</div><div class="line">        <span class="keyword">except</span> NoSuchElementException <span class="keyword">as</span> e: <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_alert_present</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>: self.driver.switch_to_alert()</div><div class="line">        <span class="keyword">except</span> NoAlertPresentException <span class="keyword">as</span> e: <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_alert_and_get_its_text</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            alert = self.driver.switch_to_alert()</div><div class="line">            alert_text = alert.text</div><div class="line">            <span class="keyword">if</span> self.accept_next_alert:</div><div class="line">                alert.accept()</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                alert.dismiss()</div><div class="line">            <span class="keyword">return</span> alert_text</div><div class="line">        <span class="keyword">finally</span>: self.accept_next_alert = <span class="keyword">True</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></div><div class="line">        self.driver.quit()</div><div class="line">        self.assertEqual([], self.verificationErrors)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    unittest.main()</div></pre></td></tr></table></figure>
<p>虽然说用的是Python2，但是并不影响，简单改一下就就可以使用了，主要逻辑在<code>test_untitled_test_case</code>函数中，可以直接拿来使用。</p>
<p>注意这里使用了<code>unittest</code>，不熟悉的可以来看看<a href="https://docs.python.org/3/library/unittest.html" target="_blank" rel="external">文档</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> unittest</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStringMethods</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_upper</span><span class="params">(self)</span>:</span></div><div class="line">        self.assertEqual(<span class="string">'foo'</span>.upper(), <span class="string">'FOO'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_isupper</span><span class="params">(self)</span>:</span></div><div class="line">        self.assertTrue(<span class="string">'FOO'</span>.isupper())</div><div class="line">        self.assertFalse(<span class="string">'Foo'</span>.isupper())</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_split</span><span class="params">(self)</span>:</span></div><div class="line">        s = <span class="string">'hello world'</span></div><div class="line">        self.assertEqual(s.split(), [<span class="string">'hello'</span>, <span class="string">'world'</span>])</div><div class="line">        <span class="comment"># check that s.split fails when the separator is not a string</span></div><div class="line">        <span class="keyword">with</span> self.assertRaises(TypeError):</div><div class="line">            s.split(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    unittest.main()</div></pre></td></tr></table></figure>
<h1 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h1><p>这里建议直接在Chrome应用市场安装，地址 <a href="https://chrome.google.com/webstore/detail/katalon-recorder-selenium/ljdobmomdgdljniojadhoplhkpialdid/related" target="_blank" rel="external">Katalon Recorder</a></p>
<p>考虑到有些同学可能那啥，所以我已经下载好了。公众号：Python爬虫与算法进阶，回复：<strong>傻瓜</strong></p>
<p><img src="https://i.imgur.com/93kxeCD.jpg" alt=""></p>
<h1 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h1><p>这个相当于按键精灵，把我们对浏览器的每一步操作都完成了，可以用来生成代码，和postman一样，所以我才会说 <code>Katalon + 傻瓜 == selenium</code>，完全是傻瓜操作。</p>
<p>比如来做一些自动化登录、注册等板块会非常爽，但是验证码部分还是需要自行解决。</p>
<p>但是该软件也是有一些问题的，它不能进行多页面切换，也就是不能自动切换到新打开的窗口，会有错误提示<code># ERROR: Caught exception [ERROR: Unsupported command [selectWindow | win_ser_1 | ]]</code>，这一步必须自己手动来操作，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">driver.current_window_handle 获取当前窗口handle</div><div class="line">driver.window_handles 获取所有窗口的handle，返回list列表</div><div class="line">driver.switch_to.window(handle) 切换到对应的窗口</div><div class="line">driver.close() 关闭当前窗口</div></pre></td></tr></table></figure>
<p>测试打开多窗口的代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</div><div class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</div><div class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</div><div class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoAlertPresentException</div><div class="line"><span class="keyword">import</span> unittest, time, re</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zhihu</span><span class="params">(unittest.TestCase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></div><div class="line">        self.driver = webdriver.Firefox()</div><div class="line">        self.driver.implicitly_wait(<span class="number">30</span>)</div><div class="line">        self.base_url = <span class="string">"https://www.katalon.com/"</span></div><div class="line">        self.verificationErrors = []</div><div class="line">        self.accept_next_alert = <span class="keyword">True</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_zhihu</span><span class="params">(self)</span>:</span></div><div class="line">        driver = self.driver</div><div class="line">        driver.get(<span class="string">"https://www.zhihu.com/people/cuishite/activities"</span>)</div><div class="line">        driver.find_element_by_xpath(<span class="string">"//div[@id='ProfileMain']/div/ul/li[2]/a"</span>).click()</div><div class="line">        driver.find_element_by_xpath(<span class="string">"//div[@id='ProfileMain']/div/ul/li[4]/a/span"</span>).click()</div><div class="line">        driver.find_element_by_link_text(<span class="string">u"Cookies池的后续解决方案"</span>).click()</div><div class="line">        <span class="comment"># ERROR: Caught exception [ERROR: Unsupported command [selectWindow | win_ser_1 | ]]</span></div><div class="line">        driver.find_element_by_xpath(<span class="string">"//img[contains(@src,'https://pic4.zhimg.com/v2-7ff26e52e6c82c080f62d8e9291e532b_b.jpg')]"</span>).click()</div><div class="line">        driver.find_element_by_link_text(<span class="string">u"Cookies池的后续解决方案"</span>).click()</div><div class="line">        <span class="comment"># ERROR: Caught exception [ERROR: Unsupported command [selectWindow | win_ser_2 | ]]</span></div><div class="line">        driver.find_element_by_xpath(<span class="string">"//div[@id='js_article']/div[2]"</span>).click()</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_element_present</span><span class="params">(self, how, what)</span>:</span></div><div class="line">        <span class="keyword">try</span>: self.driver.find_element(by=how, value=what)</div><div class="line">        <span class="keyword">except</span> NoSuchElementException <span class="keyword">as</span> e: <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_alert_present</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>: self.driver.switch_to_alert()</div><div class="line">        <span class="keyword">except</span> NoAlertPresentException <span class="keyword">as</span> e: <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_alert_and_get_its_text</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            alert = self.driver.switch_to_alert()</div><div class="line">            alert_text = alert.text</div><div class="line">            <span class="keyword">if</span> self.accept_next_alert:</div><div class="line">                alert.accept()</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                alert.dismiss()</div><div class="line">            <span class="keyword">return</span> alert_text</div><div class="line">        <span class="keyword">finally</span>: self.accept_next_alert = <span class="keyword">True</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></div><div class="line">        self.driver.quit()</div><div class="line">        self.assertEqual([], self.verificationErrors)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    unittest.main()</div></pre></td></tr></table></figure>
<p>所以只需要这一点就可以完善代码，同时可以看看他们的官网 <a href="https://www.katalon.com/" target="_blank" rel="external">KATALON - Best automated testing tool for web, mobile, API</a>，他们主要是提供测试工具，感兴趣的可以了解下。</p>
<p><img src="https://i.imgur.com/V8smLse.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第五十六篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;简直是神器啊  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/dIxaOYj.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>Cookies池的后续解决方案</title>
    <link href="https://zhangslob.github.io/2018/06/16/Cookies%E6%B1%A0%E7%9A%84%E5%90%8E%E7%BB%AD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://zhangslob.github.io/2018/06/16/Cookies池的后续解决方案/</id>
    <published>2018-06-16T07:01:54.000Z</published>
    <updated>2018-06-16T07:05:36.039Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第五十五篇原创文章
</code></pre><p>终于有方法了  (๑• . •๑)</p>
<p><img src="https://i.imgur.com/VD9q71g.jpg" alt=""></p>
<a id="more"></a>
<p><img src="https://i.imgur.com/VD9q71g.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/bmiddle/76a1b64dly1fschugfmkfg20a905savu.gif" alt=""></p>
<blockquote>
<p>作为一名罗吹,先吹一波C罗牛皮,简直太帅了了了</p>
<p>瞧瞧这个眼神<br>建议大家可以看看这场比赛，西班牙VS葡萄牙，我相信你会爱上足球的</p>
</blockquote>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p>在上一篇文章: 简单说明了自己对于该网站的想法,在经过两天的测试与研究之后,我有了更多的想法.</p>
<h2 id="想法一-为每个Cookies绑定唯一IP"><a href="#想法一-为每个Cookies绑定唯一IP" class="headerlink" title="想法一: 为每个Cookies绑定唯一IP"></a>想法一: 为每个Cookies绑定唯一IP</h2><p>你作为一个普通用户,如果对方网站检测到你不停地变换IP从不同地方来发送请求,那他肯定会有识别.那么我们可以把每一个Cookies分配唯一的IP代理,也就是你这个Cookies发送请求的代理始终是唯一的.</p>
<p>但是这种方法的实现方式还没有想出来,不知道该使用哪些技术栈来实现这个想法</p>
<h2 id="想法二-解决验证码"><a href="#想法二-解决验证码" class="headerlink" title="想法二: 解决验证码"></a>想法二: 解决验证码</h2><p>好,既然你弹出验证码,那我就解决它! 解决方法是:</p>
<ol>
<li>该网站的验证码图片是<code>base64</code>,用<code>python</code>转一下,接上第三方就OK</li>
<li>同时该网站参数中还带有<code>token</code>参数,经过前端大佬的断点调试,发现是对多个字段的两次加密</li>
<li>保持会话session.你需要让对方网站知道是你这个用户,所以你的cookies,ip,headers相关信息必须保持一致,我当时的想法是使用<code>requests</code>的<code>session</code>来完成这一步操作,但是很难完全模拟,因为整个爬虫使用<code>scrapy</code>来写,处理验证码使用<code>requests</code>来做,<code>session</code>这部分不大好模拟.</li>
</ol>
<p>附上一些为<code>session</code>添加信息的代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, my_cookie, proxy, headers)</span>:</span></div><div class="line">    self.session = requests.session()</div><div class="line">    self.session.cookies.update(my_cookie)</div><div class="line">    self.session.headers.update(&#123;<span class="string">'User-Agent'</span>: headers&#125;)</div><div class="line">    self.session.update(proxy)</div></pre></td></tr></table></figure>
<h2 id="想法三-不解决验证问题-无脑重试"><a href="#想法三-不解决验证问题-无脑重试" class="headerlink" title="想法三: 不解决验证问题,无脑重试"></a>想法三: 不解决验证问题,无脑重试</h2><p>这是最蠢的办法,也是我目前在使用的方法. /(ㄒoㄒ)/~~</p>
<p>思路是: 将<code>cookies</code>保存到mongoDB做持久化,再写一个脚本,持续的向<code>redis</code>中添加<code>cookies</code>和<code>start_urls</code>,然后对这些<code>start_urls</code>不停地重试,对,就是不停地重试,直到把所有的链接跑完.本次需要采集的链接并不多,质量要求不高,只需要我采集到数据就好.</p>
<p>需要注意的是:</p>
<ol>
<li>需要为你的表增加唯一键,不然会有重复数据</li>
<li>每条请求添加<code>dont_filter=True</code>,不然去重会影响爬取</li>
</ol>
<p>添加<code>cookies</code>和<code>start_urls</code>代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># add cookies and start_urls to local_redis</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">if</span> local_redis.scard(<span class="string">'spider:cookies'</span>) &lt; <span class="number">10</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> cookies_list:</div><div class="line">            local_redis.sadd(<span class="string">'spider:cookies'</span>, i)</div><div class="line">        print(<span class="string">"cookies Done"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> local_redis.scard(<span class="string">'spider:start_urls'</span>) &lt; <span class="number">10</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> url_list:</div><div class="line">            local_redis.sadd(<span class="string">'spider:start_urls'</span>, i)</div><div class="line">        print(<span class="string">"start_urls Done"</span>)</div><div class="line">        </div><div class="line">    time.sleep(<span class="number">10</span>)</div></pre></td></tr></table></figure>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>我是用的是第三种方法,目前看来效果还行,数据已经爬取了大半,相信三天假过去了应该就没问题了.</p>
<p>如果以后要长期做这个项目的话,最好的办法应该还是第二种,从根本去解决问题.</p>
<p>本次做这个项目也收获颇多,对于<code>cookies</code>使用更加有经验;感觉最好玩的是<code>token</code>的加密与解密实现,对这方面感兴趣的可以了解下这个: <a href="https://docs.python.org/3/library/zlib.html" target="_blank" rel="external">zlib — Compression compatible with gzip</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第五十五篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;终于有方法了  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/VD9q71g.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://zhangslob.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="cookie池" scheme="https://zhangslob.github.io/tags/cookie%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>从cookie池搭建说起</title>
    <link href="https://zhangslob.github.io/2018/06/14/%E4%BB%8Ecookie%E6%B1%A0%E6%90%AD%E5%BB%BA%E8%AF%B4%E8%B5%B7/"/>
    <id>https://zhangslob.github.io/2018/06/14/从cookie池搭建说起/</id>
    <published>2018-06-14T13:25:46.000Z</published>
    <updated>2018-06-14T14:33:09.507Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第五十四篇原创文章
</code></pre><p>我快绝望了  (๑• . •๑)</p>
<p><img src="https://i.imgur.com/ZJMuGd5.jpg" alt=""></p>
<a id="more"></a>
<p>这几天接手了一个很急的项目，要在几天爬取某网站的数据。该站是我知道国内反爬比较严重的网站之一，我也做好了心理准备。</p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1528996797209&amp;di=3836d0c6faff25ec236862e1eae20486&amp;imgtype=0&amp;src=http%3A%2F%2Fkibey-echo.b0.upaiyun.com%2Fposter%2F2014%2F09%2F24%2Fbd9ba222cb5a1e9e.gif" alt=""></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>该网站数据需要登录才能查看，APP抓包了但是没有发现相关数据，所以选择从PC站入手。</p>
<p>既然需要登录，那就需要验证一个新鲜的<code>cookies</code>可以访问多少链接；验证方法是：</p>
<blockquote>
<p>直接拷贝已经登录该网站请求的Curl，转换为Python代码，加一个循环，测试，单个账号可以跑多少页</p>
</blockquote>
<p>经过10多次测试，发现单个Cookies可以下载，至少50个网页。</p>
<p>那么就很好做了，可以开始写思路了。</p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1528996828313&amp;di=58be2c7592bc5f2f35ac0df4e513234f&amp;imgtype=0&amp;src=http%3A%2F%2Fcdnq.duitang.com%2Fuploads%2Fitem%2F201507%2F10%2F20150710172216_LtFrM.thumb.700_0.jpeg" alt=""></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>首先我们需要多个可以登录的Cookies，然后利用这些Cookies去下载网页；一旦返回状态码不是200，就拉黑该Cookies。</p>
<p>具体的方法看下图：</p>
<p><img src="https://i.imgur.com/7uqitsi.png" alt=""></p>
<p>有几点说明下：</p>
<ol>
<li><strong>如何模拟注册</strong>。有两种方法，<strong>模拟请求</strong>和<strong>浏览器模拟</strong>。模拟请求就是去分析注册过程中的每一步操作，这个请求是发送验证码的，那个是注册的，我优先推荐该方法，但是这种方法遇到一些携带有大量签名参数的变态网站时，难度较大，需要自己一步步断点<code>JavaScript</code>。浏览器模拟大家应该很熟悉，Python中就是<code>selenium</code>傻瓜操作，需要哪里点哪里。注意的坑是何时切换<code>iframe</code></li>
<li><strong>Cookies的搭建</strong>。其实非常简单，这里利用了<code>redis</code>的集合，取Cookies使用<code>spop</code>即可。这里并没有做验活，因为基本上Cookies产生之后就会被使用。</li>
</ol>
<h1 id="我要崩溃了"><a href="#我要崩溃了" class="headerlink" title="我要崩溃了"></a>我要崩溃了</h1><p>不做不知道，一做吓一跳。</p>
<p>但我以为该网站很简单，搭建一个简单的Cookies池就可以解决，但是我明显太年轻了。</p>
<p>我先把采集链接推到<code>redis</code>中，使用了<code>scrapy_redis</code>。</p>
<p>该网站的反爬：</p>
<ol>
<li><strong>代理问题</strong>。其实这里有一个悖论，到底该不该使用代理。首先，我不用代理，刚开始还好，但是很快我的本地代理就被拉黑了；那好上代理，但是接下来问题来了，开始出现一个个的验证码需要填了，作为一个<strong>单独的用户</strong>，我是不可能频繁的改变自己的<code>IP</code>去访问网站的，解决方法只有一个，Cookies和代理绑定，但是这种方法真的不好实现，尤其是使用<code>Scrapy</code>开发的爬虫。</li>
<li><strong>验证码问题</strong>。既然出现了验证码，那就去解决它。验证码一般是和Cookies绑定的，那么我需要把访问该账号的<code>IP</code>、<code>User-Agent</code>、<code>Cookies</code>全部拿出来，再去发送新的请求，而且需要注意，此过程中不能再进行<code>IP</code>的变化。</li>
</ol>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>今天了大概两天的斗智斗勇，现在基本上可以爬到数据了，希望明天可以交差，不然端午就要加班了。</p>
<p>希望这只小猫咪可以给我带来好远。</p>
<p><img src="https://i.imgur.com/vWSjxX9.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第五十四篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我快绝望了  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ZJMuGd5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://zhangslob.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="cookie池" scheme="https://zhangslob.github.io/tags/cookie%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>为了知道胡歌粉丝的男女比率，爬了三百万微博数据</title>
    <link href="https://zhangslob.github.io/2018/06/07/%E8%83%A1%E6%AD%8C%E7%94%B7%E7%B2%89%E5%A4%9A%E8%BF%98%E6%98%AF%E5%A5%B3%E7%B2%89%E5%A4%9A-%E7%88%AC%E7%88%AC%E5%BE%AE%E5%8D%9A/"/>
    <id>https://zhangslob.github.io/2018/06/07/胡歌男粉多还是女粉多-爬爬微博/</id>
    <published>2018-06-07T13:59:53.000Z</published>
    <updated>2018-06-10T08:04:50.610Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第五十三篇原创文章
</code></pre><p>老胡好帅  (๑• . •๑)</p>
<p><img src="http://wx1.sinaimg.cn/large/48e837eely1fmhxeqwby0j22ds1sg157.jpg" alt=""></p>
<a id="more"></a>
<p>最近偶然间看到一条新闻，标题是：“胡歌作为一个男性明星，男粉丝比女粉丝还多，这不科学！”</p>
<p><img src="https://i.imgur.com/959B59J.png" alt=""></p>
<p>文中这样说道“胡歌在微博上的粉丝就已经达到了5748.9398万人，并且通过查看粉丝可以发现许多都是男性粉丝，这不得不说这是独一无二了”</p>
<p>当时我就震惊了，“通过查看粉丝”？？？这是什么操作，现在的UC小编越来越多了吗？</p>
<p>我作为一名老胡的粉丝，简直是不能忍，这完全是在瞎写啊。</p>
<p>所以我有个想法，把胡歌微博上六千万粉丝数据爬取下来，看看到底男粉丝多还是女粉丝多。</p>
<blockquote>
<p>大家可以在自己心中猜测一个答案，到底男粉多还是女粉多呢～～。我的答案是男性比较多。</p>
</blockquote>
<h1 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h1><p><img src="https://i.imgur.com/h1TyXZ7.png" alt=""></p>
<p>这里可以看到胡歌微博粉丝总数约6千万，本次我的目标就是尽力去找到胡歌<strong>活跃粉丝</strong>的男女比例。</p>
<p>但是我们知道微博是有限制的，微博不会把所有数据都展示出来，如图</p>
<p><img src="https://i.imgur.com/UxASfy6.png" alt=""></p>
<p>那么问题来了，我要怎样才能尽可能多的抓到粉丝数据？</p>
<p>这里我就想要尽可能多的抓取到老胡的活跃粉丝， 所谓活跃粉丝，指的是除去“不转发、不评论、不点赞”这些“三不”用户，是活跃的、有参与的用户。这些用户才是真正有价值的，正好去除了僵尸粉。</p>
<h1 id="两种思路"><a href="#两种思路" class="headerlink" title="两种思路"></a>两种思路</h1><p>采集微博粉丝，目前我有两种方法来解决这个问题，：</p>
<ol>
<li>全量采集。采集微博所有用户数据，包括关注、粉丝等。通过粉丝的粉丝、关注的关注、用户分类、推荐等等各种方法拿到微博全量用户数据。</li>
<li>采样。采集胡歌的所有微博下有评论、点赞、转发的用户，凡是有参与过的亲密值加一，当这个值超过一定限度时（比如说5或者10），我们就认为该用户是胡歌的粉丝。</li>
</ol>
<p>想了想，第一种方法短时间内是不现实的，方法2倒是可以尝试一波。</p>
<h1 id="爬虫逻辑"><a href="#爬虫逻辑" class="headerlink" title="爬虫逻辑"></a>爬虫逻辑</h1><p>爬虫分为三步：</p>
<ol>
<li>采集胡歌所有微博</li>
<li>采集每条微博的三类数据（转发、评论、点赞）</li>
<li>数据清洗</li>
</ol>
<p>好了，现在已经非常清晰了，下面就开始去寻找爬取方法。</p>
<h1 id="微博接口"><a href="#微博接口" class="headerlink" title="微博接口"></a>微博接口</h1><p>根据以往的经验，weibo.cn 和 m.weibo.cn 是最简单爬取的，weibo.com 是最难的。这次我们从 m.weibo.cn 入手，分析可以得到胡歌微博的接口，而且是无需登录的！！！很重要。其他入口都需要解决登录难题！</p>
<p><code>https://m.weibo.cn/api/container/getIndex?containerid=1076031223178222&amp;page={}</code></p>
<p>返回数据：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">cardlistInfo: &#123;</span></div><div class="line"><span class="title">containerid</span>: "1076031223178222",</div><div class="line"><span class="title">v_p</span>: 42,</div><div class="line"><span class="title">show_style</span>: 1,</div><div class="line"><span class="title">total</span>: 3643,</div><div class="line"><span class="title">page</span>: 2</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>这里告诉我们总共有3643条数据，每页10条，那么翻页就很清晰了。</p>
<h2 id="其他接口"><a href="#其他接口" class="headerlink" title="其他接口"></a>其他接口</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">转发：https://m.weibo.cn/api/statuses/repostTimeline?id=<span class="number">4238119278366780</span>&amp;page=&#123;&#125;</div><div class="line"></div><div class="line">评论：https://m.weibo.cn/api/comments/show?id=<span class="number">4238119278366780</span>&amp;page=&#123;&#125;</div><div class="line"></div><div class="line">点赞：https://m.weibo.cn/api/attitudes/show?id=<span class="number">4238119278366780</span>&amp;page=&#123;&#125;</div></pre></td></tr></table></figure>
<p>（想要爬其他人，替换这里的id即可）</p>
<p>暂时不清楚总共有多少页，虽然返回的数据中有 <code>total_number</code> ，但是此数字并不准确，还需要更多测试。</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">total_number: 19526897,</span></div><div class="line"><span class="title">hot_total_number</span>: 0,</div><div class="line"><span class="title">max</span>: 1952690</div></pre></td></tr></table></figure>
<p>（简单测后发现总页数为<code>total_number//55</code>）</p>
<h2 id="采集用户信息接口"><a href="#采集用户信息接口" class="headerlink" title="采集用户信息接口"></a>采集用户信息接口</h2><p><code>https://m.weibo.cn/api/container/getIndex?type=uid&amp;value=6114792181</code></p>
<p>其实不需要这一次请求，因为在转发接口中已经有我们想要的数据了，如下：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function">user: &#123;</span></div><div class="line"><span class="title">id</span>: 6431898981,</div><div class="line"><span class="title">screen_name</span>: "豪气<span class="title">superiority</span>",</div><div class="line"><span class="title">profile_image_url</span>: "<span class="title">https</span>://<span class="title">tvax2.sinaimg.cn</span>/<span class="title">crop</span>.9.0.220.220.180/0071<span class="title">hAK9ly8fmdxpea2vxj306n064glj.jpg</span>",</div><div class="line"><span class="title">profile_url</span>: "<span class="title">https</span>://<span class="title">m.weibo.cn</span>/<span class="title">u</span>/6431898981?<span class="title">uid</span>=6431898981&amp;<span class="title">featurecode</span>=20000320",</div><div class="line"><span class="title">statuses_count</span>: 7255,</div><div class="line"><span class="title">verified</span>: <span class="title">false</span>,</div><div class="line"><span class="title">verified_type</span>: -1,</div><div class="line"><span class="title">close_blue_v</span>: <span class="title">false</span>,</div><div class="line"><span class="title">description</span>: "",</div><div class="line"><span class="title">gender</span>: "<span class="title">m</span>",</div><div class="line"><span class="title">mbtype</span>: 0,</div><div class="line"><span class="title">urank</span>: 4,</div><div class="line"><span class="title">mbrank</span>: 0,</div><div class="line"><span class="title">follow_me</span>: <span class="title">false</span>,</div><div class="line"><span class="title">following</span>: <span class="title">false</span>,</div><div class="line"><span class="title">followers_count</span>: 2,</div><div class="line"><span class="title">follow_count</span>: 62,</div><div class="line"><span class="title">cover_image_phone</span>: "<span class="title">https</span>://<span class="title">tva1.sinaimg.cn</span>/<span class="title">crop</span>.0.0.640.640.640/549<span class="title">d0121tw1egm1kjly3jj20hs0hsq4f.jpg</span>",</div><div class="line"><span class="title">avatar_hd</span>: "<span class="title">https</span>://<span class="title">wx2.sinaimg.cn</span>/<span class="title">orj480</span>/0071<span class="title">hAK9ly8fmdxpea2vxj306n064glj.jpg</span>",</div><div class="line"><span class="title">like</span>: <span class="title">false</span>,</div><div class="line"><span class="title">like_me</span>: <span class="title">false</span>,</div><div class="line"><span class="title">badge</span>: &#123;</div><div class="line"><span class="title">user_name_certificate</span>: 1,</div><div class="line"><span class="title">wenchuan_10th</span>: 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很蛋疼的是，点赞和评论接口中并没有相关数据，所以点赞和评论部分要重新爬取，如下：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="function">id: 4247512245791226,</span></div><div class="line"><span class="title">created_at</span>: "5分钟前",</div><div class="line"><span class="title">source</span>: "微博 <span class="title">weibo.com</span>",</div><div class="line"><span class="title">user</span>: &#123;</div><div class="line"><span class="title">id</span>: 6114792181,</div><div class="line"><span class="title">screen_name</span>: "<span class="title">Ming_54456</span>",</div><div class="line"><span class="title">profile_image_url</span>: "<span class="title">https</span>://<span class="title">tvax1.sinaimg.cn</span>/<span class="title">crop</span>.367.164.918.918.180/006<span class="title">FP2Mlly8fjs2mf3x6pj319x0yoqbo.jpg</span>",</div><div class="line"><span class="title">verified</span>: <span class="title">false</span>,</div><div class="line"><span class="title">verified_type</span>: -1,</div><div class="line"><span class="title">mbtype</span>: 12,</div><div class="line"><span class="title">profile_url</span>: "<span class="title">https</span>://<span class="title">m.weibo.cn</span>/<span class="title">u</span>/6114792181?<span class="title">uid</span>=6114792181&amp;<span class="title">featurecode</span>=20000320",</div><div class="line"><span class="title">remark</span>: "",</div><div class="line"><span class="title">following</span>: <span class="title">false</span>,</div><div class="line"><span class="title">follow_me</span>: <span class="title">false</span></div><div class="line">&#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>微博官方API同样提供相应数据 ，建议使用前仔细阅读 <a href="http://open.weibo.com/wiki/Rate-limiting" target="_blank" rel="external">接口访问频次权限</a></p>
<h1 id="爬虫代码"><a href="#爬虫代码" class="headerlink" title="爬虫代码"></a>爬虫代码</h1><p>爬虫完整代码可以去我的公众号（Python爬虫与算法进阶），回复“微博”获得。</p>
<p>爬虫语言是Python3，使用Scrapy框架，数据保存在mongo，没有使用分布式，单机3天跑完。</p>
<p>因为微博的反爬，需要大量代理支撑。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># code is far away from bugs with the god animal protecting</span></div><div class="line">    I love animals. They taste delicious.</div><div class="line">              ┏┓      ┏┓</div><div class="line">            ┏┛┻━━━┛┻┓</div><div class="line">            ┃      ☃      ┃</div><div class="line">            ┃  ┳┛  ┗┳  ┃</div><div class="line">            ┃      ┻      ┃</div><div class="line">            ┗━┓      ┏━┛</div><div class="line">                ┃      ┗━━━┓</div><div class="line">                ┃  神兽保佑    ┣┓</div><div class="line">                ┃　永无BUG！   ┏┛</div><div class="line">                ┗┓┓┏━┳┓┏┛</div><div class="line">                  ┃┫┫  ┃┫┫</div><div class="line">                  ┗┻┛  ┗┻┛</div></pre></td></tr></table></figure>
<p>爬取的数据实例：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("<span class="number">5</span>b162d10e0eafb1d6e63b460"),</div><div class="line">    "id" : NumberLong(<span class="number">5372682651</span>),</div><div class="line">    "statuses_count" : <span class="number">10599</span>,</div><div class="line">    "screen_name" : "用户<span class="number">5372682651</span>",</div><div class="line">    "profile_url" : "https://m.weibo.cn/u/<span class="number">5372682651</span>?uid=<span class="number">5372682651</span>",</div><div class="line">    "description" : "暂无数据",</div><div class="line">    "gender" : "f",</div><div class="line">    "followers_count" : <span class="number">80</span>,</div><div class="line">    "follow_count" : <span class="number">1060</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="简单数据清洗"><a href="#简单数据清洗" class="headerlink" title="简单数据清洗"></a>简单数据清洗</h1><p>最终跑完一次爬到的数据有<code>3889285</code>，因为有大量页面会跳转到登录页面，对这些请求做一个重试效果会好些。</p>
<p>数据清洗对我来说真的是个头疼的问题，找了很多相关资料，最后使用了mongo的<code>aggregate</code>方法，该方法也是我第一次使用，下面是代码：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">db.getCollection('Weibo').aggregate(</div><div class="line">    [</div><div class="line">        &#123;"$group" : &#123;_id:&#123;id:"$id",gender:"$gender"&#125;, count:&#123;$sum:<span class="number">1</span>&#125;&#125;&#125;,</div><div class="line">        &#123;$sort:&#123;"count":-<span class="number">1</span>&#125;&#125;,</div><div class="line">        &#123; $out:"result"&#125;,</div><div class="line">    ],</div><div class="line">    &#123;</div><div class="line"><span class="function">      allowDiskUse:<span class="title">true</span>,</span></div><div class="line">      <span class="title">cursor</span>:&#123;&#125;</div><div class="line">    &#125;  </div><div class="line">)</div></pre></td></tr></table></figure>
<p>结果产生了一张新的表，对每个ID进行统计，并排序，如下：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    "_id" : &#123;</div><div class="line">        "id" : NumberLong(<span class="number">5737668415</span>),</div><div class="line">        "gender" : "f"</div><div class="line">    &#125;,</div><div class="line">    "count" : <span class="number">106701</span>.<span class="number">0</span></div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    "_id" : &#123;</div><div class="line">        "id" : NumberLong(<span class="number">5909154992</span>),</div><div class="line">        "gender" : "m"</div><div class="line">    &#125;,</div><div class="line">    "count" : <span class="number">72298</span>.<span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参与次数达到十万次，天呐，超级真爱粉，<a href="https://m.weibo.cn/u/5737668415?uid=5737668415" target="_blank" rel="external">缘来是她</a>，疯狂刷屏有没有</p>
<p><img src="http://p8eyj0cpn.bkt.clouddn.com/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20180607110639.png" alt=""></p>
<p>好了，现在开始看看真正的数据吧。</p>
<p>本次共采集用户数据<code>3889285</code>条，，原始数据中男性占比<code>%33.68</code>，女性占比<code>%66.32</code>，好吧，看来女性粉丝更多；去重之后数据共有<code>1129035</code>，男性占比<code>%29.58</code>，女性占比<code>%70.42</code>，怎么看着女性粉丝还是更多呢。。</p>
<p>我们再来计算一个数据，亲密度大于10的粉丝共有<code>16486</code>位，其中男性占比<code>%24.05</code>，女性占比<code>%75.95</code>，于是有下面这张表格。</p>
<table>
<thead>
<tr>
<th style="text-align:left">亲密度</th>
<th>男性占比</th>
<th>女性占比</th>
<th>粉丝总数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">大于0</td>
<td>29.58%</td>
<td>70.42%</td>
<td>1129035</td>
</tr>
<tr>
<td style="text-align:left">大于10</td>
<td>24.05%</td>
<td>75.95%</td>
<td>16486</td>
</tr>
<tr>
<td style="text-align:left">大于50</td>
<td>32.77%</td>
<td>67.23%</td>
<td>4285</td>
</tr>
<tr>
<td style="text-align:left">大于100</td>
<td>36.77%</td>
<td>63.23%</td>
<td>2578</td>
</tr>
<tr>
<td style="text-align:left">大于1000</td>
<td>40.18%</td>
<td>59.82%</td>
<td>331</td>
</tr>
<tr>
<td style="text-align:left">大于10000</td>
<td>37.5%</td>
<td>62.5%</td>
<td>24</td>
</tr>
<tr>
<td style="text-align:left">Top10</td>
<td>30.00%</td>
<td>70.00%</td>
<td>10</td>
</tr>
</tbody>
</table>
<p>这个数据挺有意思的，画张表瞧瞧</p>
<p><img src="https://i.loli.net/2018/06/10/5b1cd33ba3031.png" alt=""></p>
<p>粉丝昵称词云</p>
<p><img src="https://i.loli.net/2018/06/10/5b1cd793e1520.png" alt=""></p>
<p>（感谢BDP）</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>看了这些数据，相信大家自己心中已经有了答案。</p>
<p>胡歌作为一个玉树临风、 英俊潇洒、 风流倜傥、 一表人才、 高大威猛、 气宇不凡、 温文尔雅、 品貌非凡、 仪表不凡的男人，女粉丝比较多是很正常的。但是为啥大家都会有一种男粉丝比女粉丝多的错觉呢，我觉得是对比产生的感觉。我拿胡歌与其他小鲜肉作对比，肯定会跟欣赏胡歌。你说呢？</p>
<p>本文并不是为了证明什么，只是作为一名普通粉丝想去看看更多东西。其实本次数据爬取有很多地方需要优化，大家不用太过当真。如果你有更好的分析数据的想法，可以联系我。</p>
<blockquote>
<p>老大镇楼</p>
</blockquote>
<p><img src="http://wx1.sinaimg.cn/large/48e837eegy1fe2dmkfsquj21tq1tqu0x.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第五十三篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;老胡好帅  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wx1.sinaimg.cn/large/48e837eely1fmhxeqwby0j22ds1sg157.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="胡歌" scheme="https://zhangslob.github.io/tags/%E8%83%A1%E6%AD%8C/"/>
    
      <category term="微博" scheme="https://zhangslob.github.io/tags/%E5%BE%AE%E5%8D%9A/"/>
    
  </entry>
  
  <entry>
    <title>zsh(+fish)=完美终端</title>
    <link href="https://zhangslob.github.io/2018/06/05/zsh-fish-%E5%AE%8C%E7%BE%8E%E7%BB%88%E7%AB%AF/"/>
    <id>https://zhangslob.github.io/2018/06/05/zsh-fish-完美终端/</id>
    <published>2018-06-05T14:27:23.000Z</published>
    <updated>2018-06-05T14:35:15.770Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第五十二篇原创文章
</code></pre><p>好看、好用  (๑• . •๑)</p>
<p><img src="http://p8eyj0cpn.bkt.clouddn.com/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20180605191928.png" alt=""></p>
<a id="more"></a>
<p>自从用了深度，有一个非常明显的变化就是终端的改变，实在是比windows的好用一百倍，尤其是使用一些工具。下面说说我现在的配置。</p>
<p>如下图，是我目前正在使用的终端，集成了zsh和fish的功能，目前用着最顺手的。</p>
<p><img src="http://p8eyj0cpn.bkt.clouddn.com/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20180605190132.png" alt=""></p>
<p><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a></p>
<h1 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h1><p>一般来说，直接运行<code>sudo apt-get install zsh</code>即可，当然也可以下载源<a href="http://zsh.sourceforge.net/Arc/source.html" target="_blank" rel="external">Download zsh source</a>，使用curl安装<code>curl -L &lt;https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh&gt; | sh</code></p>
<p>把<code>zsh</code>设置为默认终端<code>chsh -s $(which zsh)</code></p>
<p>更多细节参考<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH" target="_blank" rel="external">Installing ZSH</a></p>
<p>先欣赏下<code>zsh</code>的效果。来自官网</p>
<p><img src="https://i.imgur.com/hLnYQUr.jpg" alt=""></p>
<p><img src="https://i.imgur.com/DHJp9Zy.jpg" alt=""></p>
<p><img src="https://i.imgur.com/EA7m7Ln.jpg" alt=""></p>
<h1 id="修改zsh主题"><a href="#修改zsh主题" class="headerlink" title="修改zsh主题"></a>修改zsh主题</h1><p><code>vi ~/.zshrc</code>，然后找到<code>ZSH_THEME</code>，默认的是<code>ZSH_THEME=robbyrussell</code>，就像我这样，因为我这里用的是深度终端，而且也修改了终端主题</p>
<p><img src="http://p8eyj0cpn.bkt.clouddn.com/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20180605191149.png" alt=""></p>
<p>当然，你可以来这里看看，选一个自己喜欢的主题 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="external">Themes</a></p>
<p><img src="https://cloud.githubusercontent.com/assets/2618447/6316862/70f58fb6-ba03-11e4-82c9-c083bf9a6574.png" alt=""></p>
<p><code>agnoster</code>也很好看。</p>
<p>据说大神都用<code>random</code>，是真的吗？</p>
<h1 id="安装-fish"><a href="#安装-fish" class="headerlink" title="安装 fish"></a>安装 fish</h1><p>有句话这样说</p>
<blockquote>
<p>二逼青年用 bash，普通青年用 zsh，文艺青年用 <a href="http://fishshell.com/" target="_blank" rel="external">fish</a></p>
</blockquote>
<p>我最喜欢 <code>fish</code>的一点就是 <strong>根据历史输入自动补全</strong>，来看图，只要是历史有输入的，都会有记录有提示，对于一些很长的命令，简直超级爽，再也不用手动复制粘贴了。</p>
<p><img src="http://p8eyj0cpn.bkt.clouddn.com/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20180605191928.png" alt=""></p>
<p>但是<code>fish</code>和<code>zsh</code>好像不能同时使用，但是有一个插件可以在<code>zsh</code>上达到和<code>fish</code>同样的效果。</p>
<p>地址在这里 <a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="external"><strong>zsh-autosuggestions</strong></a></p>
<p>首先下载下来</p>
<p><code>git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</code></p>
<p>然后<code>vi ~/.zshrc</code>，添加<code>zsh-autosuggestions</code>到plugins中，<code>git</code>是默认就有的。然后新打开一个终端，就可以达到<code>fish</code>有的你是提示功能了。</p>
<p><img src="http://p8eyj0cpn.bkt.clouddn.com/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20180605193558.png" alt=""></p>
<p>还可以安装语法高亮插件 <a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="external">zsh-syntax-highlighting</a>，安装方法和上面的一样，在plugins中添加<code>zsh-syntax-highlighting</code>即可。</p>
<p>这些是我目前发现的比较好用的插件和工具，大家有什么推荐的吗？</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第五十二篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好看、好用  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p8eyj0cpn.bkt.clouddn.com/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20180605191928.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="终端" scheme="https://zhangslob.github.io/categories/%E7%BB%88%E7%AB%AF/"/>
    
    
      <category term="linux" scheme="https://zhangslob.github.io/tags/linux/"/>
    
      <category term="zsh" scheme="https://zhangslob.github.io/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>爬虫学到什么程度可以去找工作</title>
    <link href="https://zhangslob.github.io/2018/05/29/%E7%88%AC%E8%99%AB%E5%AD%A6%E5%88%B0%E4%BB%80%E4%B9%88%E7%A8%8B%E5%BA%A6%E5%8F%AF%E4%BB%A5%E5%8E%BB%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    <id>https://zhangslob.github.io/2018/05/29/爬虫学到什么程度可以去找工作/</id>
    <published>2018-05-29T14:52:52.000Z</published>
    <updated>2018-05-29T16:09:07.909Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第五十一篇原创文章
</code></pre><p>分享下我的经验与教训  (๑• . •๑)</p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1527615838846&amp;di=6927100e3cb49201774aa07736031e9b&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.btestingsky.com%2Ffiles%2Fcourse%2F2015%2F04-14%2F16211177d887256747.gif%3F4.2.0" alt=""></p>
<a id="more"></a>
<p>最近很多朋友问我，我在自学爬虫，学到什么程度可以去找工作呢？</p>
<p>这篇文章会说说我自己的心得体验，关于爬虫、关于工作，仅供参考。</p>
<h1 id="学到哪种程度"><a href="#学到哪种程度" class="headerlink" title="学到哪种程度"></a>学到哪种程度</h1><p>暂且把目标定位初级爬虫工程师，简单列一下吧：</p>
<p>（必要部分）</p>
<ol>
<li>语言选择：一般是了解Python、Java、Golang之一</li>
<li>熟悉多线程编程、网络编程、HTTP协议相关</li>
<li>开发过完整爬虫项目（最好有全站爬虫经验，这个下面会说到）</li>
<li>反爬相关，cookie、ip池、验证码等等</li>
<li>熟练使用分布式</li>
</ol>
<p>（非必要，建议）</p>
<ol>
<li>了解消息队列，如RabbitMQ、Kafka、Redis等</li>
<li>具有数据挖掘、自然语言处理、信息检索、机器学习经验</li>
<li>熟悉APP数据采集、中间人代理</li>
<li>大数据处理（Hive/MR/Spark/Storm）</li>
<li>数据库Mysql，redis，mongdb</li>
<li>熟悉Git操作、linux环境开发</li>
<li>读懂js代码，这个真的很重要</li>
</ol>
<h1 id="如何提升"><a href="#如何提升" class="headerlink" title="如何提升"></a>如何提升</h1><p>随便看看知乎上的教程就可以入门了，就Python而言，会requests当然是不够的，还需要了解scrapy和pyspider这两个框架，scrapy_redis也是需要理解原理的。</p>
<p>分布式如何搭建、如何解决其中遇到内存、速度问题。</p>
<p>参考 <a href="https://mp.weixin.qq.com/s?__biz=MzIwNjUxMTQyMA==&amp;mid=2247484093&amp;idx=1&amp;sn=f6d3d91af46830816c1ad30221504630&amp;chksm=9721ceeea05647f86376f66d75cff028f5c03c9930dbb1ca14bb3d290437be2509a4420d0f7a#rd" target="_blank" rel="external">scrapy-redis 和 scrapy 有什么区别？</a></p>
<p><img src="https://i.imgur.com/1uic8Qk.jpg" alt=""></p>
<h1 id="什么叫全站爬取"><a href="#什么叫全站爬取" class="headerlink" title="什么叫全站爬取"></a>什么叫全站爬取</h1><p>最简单的拿拉钩来举例，搜索关键词，有30页，不要以为把这30页爬完就是全站爬取了，你应该想方法把所有数据全部爬下来。</p>
<p>什么办法，通过筛选缩小范围，慢慢来就OK了。</p>
<p>同时，每个职位还会有推荐职位，再写一个采集推荐的爬虫。</p>
<p><img src="https://i.imgur.com/MuvjEAt.png" alt=""></p>
<p>这个过程需要注意的是如何去重，Mongo可以、redis也可以 </p>
<p>参考 <a href="https://mp.weixin.qq.com/s?__biz=MzIwNjUxMTQyMA==&amp;mid=2247484074&amp;idx=1&amp;sn=c5d2e89ca4f30024ed213f07cd148cb2&amp;chksm=9721cef9a05647ef3c3ba3c5344de607af087d3688dbf089dd2a45519894469fe10bbc06a277#rd" target="_blank" rel="external">Scrapy中如何提高数据的插入速度</a></p>
<h1 id="实际项目经验"><a href="#实际项目经验" class="headerlink" title="实际项目经验"></a>实际项目经验</h1><p>这个面试中肯定会被人问道，如：</p>
<ol>
<li>你爬过哪些网站</li>
<li>日均最大采集量是多少</li>
<li>你遇到哪些棘手问题，如何解决</li>
<li>等等</li>
</ol>
<p>那么怎么找项目呢？比如我要爬微博数据，去Github中搜索下，项目还算少吗？</p>
<p><img src="https://i.imgur.com/MlMcavz.png" alt=""></p>
<h1 id="语言选择"><a href="#语言选择" class="headerlink" title="语言选择"></a>语言选择</h1><p>我自己建议是Python、Java、Golang最好都了解，Java爬虫的也很多，但是网上教程几乎都是Python的，悲哀。</p>
<p>最后说下Golang，Golang真的很牛逼，说个数字，Golang可以每分钟下载网页数量 2W ，Python可以吗~~</p>
<p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3503054989,264376367&amp;fm=11&amp;gp=0.jpg" alt=""></p>
<p>宣传下自己的刷题项目 <a href="https://github.com/zhangslob/Leetcode-Solutions" target="_blank" rel="external">Leetcode Solutions By All Language</a></p>
<h1 id="关于反爬"><a href="#关于反爬" class="headerlink" title="关于反爬"></a>关于反爬</h1><p>常见的 UA、Refer等需要了解是什么东西，有些验证的ID如何产生的，是否必要；关于IP池这块我不了解，不多说，需要注意的是如何设计拉黑机制；模拟登陆也是必要的，<a href="https://github.com/xchaoinfo/fuck-login" target="_blank" rel="external">fuck-login</a> 可以研究下代码，或者提PR。</p>
<p><img src="https://i.imgur.com/vhXq9Lw.png" alt=""></p>
<blockquote>
<p>模拟登陆其实就是一步步的请求，保存cookie会话</p>
</blockquote>
<h1 id="如何判断能力足够"><a href="#如何判断能力足够" class="headerlink" title="如何判断能力足够"></a>如何判断能力足够</h1><p>很简单，给个任务，爬取知乎上所有问题。</p>
<p>你会如何思考并设计这个项目？</p>
<p>欢迎留言指出</p>
<hr>
<blockquote>
<p>以上仅为个人看法，若有不足之处请指出。希望可以帮助你</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第五十一篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;分享下我的经验与教训  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1527615838846&amp;amp;di=6927100e3cb49201774aa07736031e9b&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fwww.btestingsky.com%2Ffiles%2Fcourse%2F2015%2F04-14%2F16211177d887256747.gif%3F4.2.0&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://zhangslob.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>你写过哪些让你睡不好觉的BUG</title>
    <link href="https://zhangslob.github.io/2018/05/28/%E4%BD%A0%E5%86%99%E8%BF%87%E5%93%AA%E4%BA%9B%E8%AE%A9%E4%BD%A0%E7%9D%A1%E4%B8%8D%E5%A5%BD%E8%A7%89%E7%9A%84BUG/"/>
    <id>https://zhangslob.github.io/2018/05/28/你写过哪些让你睡不好觉的BUG/</id>
    <published>2018-05-28T15:38:35.000Z</published>
    <updated>2018-05-29T14:54:00.475Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第五十篇原创文章
</code></pre><p>你写过什么有趣的BUG？  (๑• . •๑)</p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1527532149198&amp;di=dcd173ae2aab83b73a2e6bfd043a8ca9&amp;imgtype=0&amp;src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20171024%2F8d81ef9e1a014084af9aa0a4e068f75b.jpeg" alt=""></p>
<a id="more"></a>
<p>今天，聊聊 BUG。</p>
<p>今天下午发现程序中一个BUG，紧急修复之后重新上线，debug上测试没毛病，OK上正式环境。build完之后，程序一直有问题，没法读数据，头疼啊，自己看的眼睛都要瞎了，找不到原因。</p>
<p>增加更多日志，给出错的地方每一条都打印出日志来，看看到底是哪里出了问题。改完，上debug，好的没毛病，上正式环境，根据日志我大概判断出是那里的问题了，改，线下测试，debug测试，都没问题，再上正式版，还是不行。</p>
<p>这个时候已经精疲力竭了，想砸电脑！！！</p>
<p>为什么debug环境可以，正式环境不行啊？？</p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1527532671810&amp;di=9d88a0db0b7cb537c79da3df79af9c3f&amp;imgtype=0&amp;src=http%3A%2F%2Fimage.woshipm.com%2Fwp-files%2F2015%2F08%2Fbug2.png" alt=""></p>
<p>然后程序就跑起来了，是的，就跑起来了。下班，回家。（已经快10点了）</p>
<p>回到家，洗完澡，写完这篇文章，再去检查日志，so far so good！！开心~</p>
<p>现在我再仔细想了想，可能是这样：线上服务器和数据库压力比较大，程序子线程没有跑起来、或者数据库没建索引、查询时间过久（明天去验证下，因为之前一直没遇到类似问题）</p>
<p>不管了，我要睡觉了。</p>
<p>来讨论下，你写过什么让你睡不好觉的BUG？</p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1527532888936&amp;di=02b78519760eb95f70324934244548f2&amp;imgtype=0&amp;src=http%3A%2F%2Ftop.jobbole.com%2Fwp-content%2Fuploads%2Fsites%2F8%2F2014%2F09%2F148c6b0cefed4e594acd40957dda2c54.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第五十篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你写过什么有趣的BUG？  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1527532149198&amp;amp;di=dcd173ae2aab83b73a2e6bfd043a8ca9&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20171024%2F8d81ef9e1a014084af9aa0a4e068f75b.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="日常" scheme="https://zhangslob.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="BUG" scheme="https://zhangslob.github.io/tags/BUG/"/>
    
  </entry>
  
  <entry>
    <title>git大法好，push需谨慎</title>
    <link href="https://zhangslob.github.io/2018/05/26/git%E5%A4%A7%E6%B3%95%E5%A5%BD%EF%BC%8Cpush%E9%9C%80%E8%B0%A8%E6%85%8E/"/>
    <id>https://zhangslob.github.io/2018/05/26/git大法好，push需谨慎/</id>
    <published>2018-05-26T07:38:28.000Z</published>
    <updated>2018-05-26T08:13:38.659Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第四十九篇原创文章
</code></pre><p>注意自己的账号安全  (๑• . •๑)</p>
<p><img src="https://i.imgur.com/lptSYQU.jpg" alt=""></p>
<a id="more"></a>
<blockquote>
<p>在每次<code>git push</code>前，请检查你的提交文件</p>
</blockquote>
<p>故事是这样来的。（我又开始讲故事了）</p>
<p>前几天在 Github上找一些资料，碰巧看到一个合适的，就把他 clone 下来，准备在本地跑着试试看效果，但是在运行的时候却发现提示错误，根绝错误提示原因我发现是缺少了一个名为<code>config.py</code>的文件。</p>
<p>经验告诉我，这应该是一个写有相关配置的文件。现在缺少了这个文件，整个程序就没法运行，自己写的话又不知道格式什么的。</p>
<p>那我该怎么办？</p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1527331404813&amp;di=84868955d0e2240e0afc9c5053259864&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.ishuo.cn%2Fdoc%2F1703%2F861-1F31G64602-51.jpg" alt=""></p>
<p>最后我还是找到了，在Github上。我去该项目上看到作者提交了很多次的<code>commit</code>，从历史的提交中我找到了相关信息。这是一个包含有作者相关数据库的文件，我已经通知作者，让他去删除此项目。</p>
<p>看下图，每个开源项目都会显示所有的<code>commits</code>，每次提交都会把git工作目录下所有文件提交（当然你可以指定具体的文件，我习惯<code>git add .</code>）。即使你下今天把密码删除了，但是你昨天提交的密码还是会保存到<code>commits</code>中，别人还是可以找到。</p>
<p>例如你现在看到的项目 <a href="https://github.com/zhangslob/Leetcode-Solutions" target="_blank" rel="external">Leetcode-Solutions</a> ，你可以从<code>commit</code>中进入，查看到历史<code>contributors</code>的每一次提交的完整文件， 如：<a href="https://github.com/zhangslob/Leetcode-Solutions/tree/f237fe70338eeb1e9e7c950423b254b7495ab3c7" target="_blank" rel="external">很久之前的提交</a></p>
<p><img src="https://i.imgur.com/NRDG7XU.png" alt=""></p>
<p><img src="https://i.imgur.com/8ErZTIZ.png" alt=""></p>
<p>所以看到这里，你就有必要想想自己有没有把任何个人隐私数据提交到 Github 上，如果有，建议还是删除项目吧。</p>
<p>当然，这有一个前提，就是你的项目是公开的（Public），如果是私有的（Private），就不用考虑了。</p>
<p><img src="https://i.imgur.com/DHFLCfn.png" alt=""></p>
<p>创建私有项目是收费的，一般适合公司和组织。</p>
<p>最后首尾呼应： git大法好，push需谨慎</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第四十九篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意自己的账号安全  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lptSYQU.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://zhangslob.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://zhangslob.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
